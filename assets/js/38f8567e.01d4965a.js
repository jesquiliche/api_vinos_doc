"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[641],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>k});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),d=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(a),u=i,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return a?t.createElement(k,o(o({ref:n},p),{},{components:a})):t.createElement(k,o({ref:n},p))}));function k(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9803:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=a(7462),i=(a(7294),a(3905));const r={sidebar_position:3},o="Aplicaci\xf3n de Ejemplo",l={unversionedId:"Anexo/aplicacion",id:"Anexo/aplicacion",title:"Aplicaci\xf3n de Ejemplo",description:"Introducci\xf3n",source:"@site/docs/Anexo/aplicacion.md",sourceDirName:"Anexo",slug:"/Anexo/aplicacion",permalink:"/api_vinos_doc/docs/Anexo/aplicacion",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Anexo/aplicacion.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Laravel Sanctum",permalink:"/api_vinos_doc/docs/Anexo/sanctum"},next:{title:"Sanctum y swagger",permalink:"/api_vinos_doc/docs/Anexo/swagger"}},s={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Migraciones",id:"migraciones",level:2},{value:"create_denominaciones_table.php",id:"create_denominaciones_tablephp",level:3},{value:"create_tipos_table",id:"create_tipos_table",level:3},{value:"create_productos_table",id:"create_productos_table",level:3},{value:"Modelos",id:"modelos",level:2},{value:"Denominacion",id:"denominacion",level:3},{value:"Tipo",id:"tipo",level:3},{value:"Producto",id:"producto",level:3},{value:"Seeders",id:"seeders",level:2},{value:"DenominacionSeeder",id:"denominacionseeder",level:3},{value:"DatabaseSeeder",id:"databaseseeder",level:3},{value:"Controllers",id:"controllers",level:2},{value:"DenominacionController",id:"denominacioncontroller",level:3},{value:"TipoController",id:"tipocontroller",level:3},{value:"ProductoController",id:"productocontroller",level:3}],p={toc:d},m="wrapper";function c(e){let{components:n,...a}=e;return(0,i.kt)(m,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aplicaci\xf3n-de-ejemplo"},"Aplicaci\xf3n de Ejemplo"),(0,i.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,i.kt)("p",null,"Vamos a crear una peque\xf1a aplicaci\xf3n de ejemplo para probar nuestra API con Sanctum. Esta aplicaci\xf3n consiste en un peque\xf1o cat\xe1logo de vinos clasificados por tipo y denominaci\xf3n de origen. Empezaremos creando las migraciones."),(0,i.kt)("h2",{id:"migraciones"},"Migraciones"),(0,i.kt)("h3",{id:"create_denominaciones_tablephp"},"create_denominaciones_table.php"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('denominaciones', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre');\n            $table->string('descripcion')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('denominaciones');\n    }\n};\n")),(0,i.kt)("admonition",{title:"Esplicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la migraci\xf3n"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n")),(0,i.kt)("p",{parentName:"li"},"Estos ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," son declaraciones de importaci\xf3n que permiten utilizar las clases ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," del framework Laravel. Estas clases son esenciales para la creaci\xf3n y gesti\xf3n de migraciones en Laravel.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Inicio de la migraci\xf3n"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"return new class extends Migration\n")),(0,i.kt)("p",{parentName:"li"},"Esta l\xednea define una nueva clase an\xf3nima que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration")," de Laravel. Al extender ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", esta clase hereda m\xe9todos y propiedades que facilitan la creaci\xf3n y manipulaci\xf3n de tablas en la base de datos.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"up")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function up(): void\n{\n    Schema::create('denominaciones', function (Blueprint $table) {\n        $table->id();\n        $table->string('nombre');\n        $table->string('descripcion')->nullable();\n        $table->timestamps();\n    });\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up")," se ejecuta cuando se aplica la migraci\xf3n. Su prop\xf3sito es definir la estructura de una nueva tabla en la base de datos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::create('denominaciones', function (Blueprint $table) {...})")," indica que se crear\xe1 una nueva tabla llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones"),"."),(0,i.kt)("li",{parentName:"ul"},"Dentro de la funci\xf3n an\xf3nima que recibe ",(0,i.kt)("inlineCode",{parentName:"li"},"Blueprint $table"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->id()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," que es una clave primaria autoincremental."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('nombre')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," de tipo cadena de texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('descripcion')->nullable()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion")," de tipo cadena de texto que puede ser nula (es opcional)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->timestamps()")," a\xf1ade dos columnas: ",(0,i.kt)("inlineCode",{parentName:"li"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"updated_at")," para gestionar autom\xe1ticamente las marcas de tiempo de creaci\xf3n y actualizaci\xf3n de los registros."))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"down")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function down(): void\n{\n    Schema::dropIfExists('denominaciones');\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"down")," se ejecuta cuando se revierte la migraci\xf3n. Su prop\xf3sito es deshacer las acciones realizadas en el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::dropIfExists('denominaciones')")," elimina la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones")," si existe.")))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, este c\xf3digo define una migraci\xf3n que crea una tabla llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"denominaciones")," con tres columnas (",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"descripcion"),"), y dos columnas adicionales para marcas de tiempo (",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at"),"). La migraci\xf3n tambi\xe9n incluye la l\xf3gica para eliminar esta tabla si es necesario revertir los cambios.")),(0,i.kt)("h3",{id:"create_tipos_table"},"create_tipos_table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('tipos', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre');\n            $table->string('descripcion')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('tipos');\n    }\n};\n")),(0,i.kt)("admonition",{title:"Esplicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Importaci\xf3n de clases"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n")),(0,i.kt)("p",{parentName:"li"},"Estas declaraciones ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," permiten utilizar las clases ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," del framework Laravel. Estas clases son esenciales para la creaci\xf3n y gesti\xf3n de migraciones en Laravel.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la migraci\xf3n"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"return new class extends Migration\n")),(0,i.kt)("p",{parentName:"li"},"Esta l\xednea define una nueva clase an\xf3nima que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration")," de Laravel. Al extender ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", esta clase hereda m\xe9todos y propiedades que facilitan la creaci\xf3n y manipulaci\xf3n de tablas en la base de datos.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"up")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function up(): void\n{\n    Schema::create('tipos', function (Blueprint $table) {\n        $table->id();\n        $table->string('nombre');\n        $table->string('descripcion')->nullable();\n        $table->timestamps();\n    });\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up")," se ejecuta cuando se aplica la migraci\xf3n. Define la estructura de una nueva tabla en la base de datos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::create('tipos', function (Blueprint $table) {...})")," indica que se crear\xe1 una nueva tabla llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"tipos"),"."),(0,i.kt)("li",{parentName:"ul"},"Dentro de la funci\xf3n an\xf3nima que recibe ",(0,i.kt)("inlineCode",{parentName:"li"},"Blueprint $table"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->id()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," que es una clave primaria autoincremental."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('nombre')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," de tipo cadena de texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('descripcion')->nullable()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion")," de tipo cadena de texto que puede ser nula (es opcional)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->timestamps()")," a\xf1ade dos columnas: ",(0,i.kt)("inlineCode",{parentName:"li"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"updated_at")," para gestionar autom\xe1ticamente las marcas de tiempo de creaci\xf3n y actualizaci\xf3n de los registros."))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"down")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function down(): void\n{\n    Schema::dropIfExists('tipos');\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"down")," se ejecuta cuando se revierte la migraci\xf3n. Su prop\xf3sito es deshacer las acciones realizadas en el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::dropIfExists('tipos')")," elimina la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"tipos")," si existe.")))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, este c\xf3digo define una migraci\xf3n que crea una tabla llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"tipos")," con tres columnas (",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"descripcion"),"), y dos columnas adicionales para marcas de tiempo (",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at"),"). La migraci\xf3n tambi\xe9n incluye la l\xf3gica para eliminar esta tabla si es necesario revertir los cambios.")),(0,i.kt)("h3",{id:"create_productos_table"},"create_productos_table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('productos', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre');\n            $table->string('bodega')->nullable();\n            $table->text('descripcion');\n            $table->text('maridaje');\n            $table->decimal('graduacion',5,2);\n            $table->integer('ano')->nullable();\n            $table->string('sabor')->nullable();\n            $table->unsignedBigInteger('tipo_id');\n            $table->string('imagen');\n            $table->foreign('tipo_id')->references('id')->on('tipos'); \n            $table->unsignedBigInteger('denominacion_id');\n            $table->foreign('denominacion_id')->references('id')->on('denominaciones'); \n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('productos');\n    }\n};\n")),(0,i.kt)("admonition",{title:"Esplicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Importaci\xf3n de clases"),": "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n")),(0,i.kt)("p",{parentName:"li"},"Estas declaraciones ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," permiten utilizar las clases ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," del framework Laravel. Estas clases son esenciales para la creaci\xf3n y gesti\xf3n de migraciones en Laravel.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la migraci\xf3n"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"return new class extends Migration\n")),(0,i.kt)("p",{parentName:"li"},"Esta l\xednea define una nueva clase an\xf3nima que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration")," de Laravel. Al extender ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", esta clase hereda m\xe9todos y propiedades que facilitan la creaci\xf3n y manipulaci\xf3n de tablas en la base de datos.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"up")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function up(): void\n{\n    Schema::create('productos', function (Blueprint $table) {\n        $table->id();\n        $table->string('nombre');\n        $table->string('bodega')->nullable();\n        $table->text('descripcion');\n        $table->text('maridaje');\n        $table->decimal('graduacion', 5, 2);\n        $table->integer('ano')->nullable();\n        $table->string('sabor')->nullable();\n        $table->unsignedBigInteger('tipo_id');\n        $table->string('imagen');\n        $table->foreign('tipo_id')->references('id')->on('tipos');\n        $table->unsignedBigInteger('denominacion_id');\n        $table->foreign('denominacion_id')->references('id')->on('denominaciones');\n        $table->timestamps();\n    });\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up")," se ejecuta cuando se aplica la migraci\xf3n. Define la estructura de una nueva tabla en la base de datos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::create('productos', function (Blueprint $table) {...})")," indica que se crear\xe1 una nueva tabla llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"productos"),"."),(0,i.kt)("li",{parentName:"ul"},"Dentro de la funci\xf3n an\xf3nima que recibe ",(0,i.kt)("inlineCode",{parentName:"li"},"Blueprint $table"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->id()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," que es una clave primaria autoincremental."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('nombre')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," de tipo cadena de texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('bodega')->nullable()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"bodega")," de tipo cadena de texto que puede ser nula (opcional)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->text('descripcion')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion")," de tipo texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->text('maridaje')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"maridaje")," de tipo texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->decimal('graduacion', 5, 2)")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"graduacion")," de tipo decimal con un total de 5 d\xedgitos y 2 decimales para representar la graduaci\xf3n alcoh\xf3lica."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->integer('ano')->nullable()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"ano")," de tipo entero que puede ser nula (opcional)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('sabor')->nullable()")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"sabor")," de tipo cadena de texto que puede ser nula (opcional)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->unsignedBigInteger('tipo_id')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"tipo_id")," de tipo entero sin signo para referenciar a la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"tipos"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->string('imagen')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"imagen")," de tipo cadena de texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->foreign('tipo_id')->references('id')->on('tipos')")," define una clave for\xe1nea ",(0,i.kt)("inlineCode",{parentName:"li"},"tipo_id")," que referencia la columna ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"tipos"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->unsignedBigInteger('denominacion_id')")," crea una columna ",(0,i.kt)("inlineCode",{parentName:"li"},"denominacion_id")," de tipo entero sin signo para referenciar a la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->foreign('denominacion_id')->references('id')->on('denominaciones')")," define una clave for\xe1nea ",(0,i.kt)("inlineCode",{parentName:"li"},"denominacion_id")," que referencia la columna ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$table->timestamps()")," a\xf1ade dos columnas: ",(0,i.kt)("inlineCode",{parentName:"li"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"updated_at")," para gestionar autom\xe1ticamente las marcas de tiempo de creaci\xf3n y actualizaci\xf3n de los registros."))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"down")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function down(): void\n{\n    Schema::dropIfExists('productos');\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"down")," se ejecuta cuando se revierte la migraci\xf3n. Su prop\xf3sito es deshacer las acciones realizadas en el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"up"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Schema::dropIfExists('productos')")," elimina la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"productos")," si existe.")))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, este c\xf3digo define una migraci\xf3n que crea una tabla llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"productos")," con varias columnas: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bodega"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"descripcion"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"maridaje"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"graduacion"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ano"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sabor"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tipo_id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"imagen"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"denominacion_id"),", adem\xe1s de las columnas ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," para marcas de tiempo. Tambi\xe9n establece relaciones con las tablas ",(0,i.kt)("inlineCode",{parentName:"p"},"tipos")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"denominaciones")," mediante claves for\xe1neas. La migraci\xf3n incluye la l\xf3gica para eliminar esta tabla si es necesario revertir los cambios.")),(0,i.kt)("h2",{id:"modelos"},"Modelos"),(0,i.kt)("h3",{id:"denominacion"},"Denominacion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Denominacion extends Model\n{\n    use HasFactory;\n\n    protected $table = \"Denominaciones\";\n\n    protected $fillable = ['nombre', 'descripcion'];\n\n    /**\n     * Define la relaci\xf3n uno a muchos con el modelo Producto.\n     */\n    public function producto()\n    {\n        return $this->hasMany('App\\Models\\Producto');\n    }\n}\n")),(0,i.kt)("admonition",{title:"Esplicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Espacio de nombres y uso de clases"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace App\\Models;")," define el espacio de nombres para la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion"),", indicando que pertenece al directorio ",(0,i.kt)("inlineCode",{parentName:"li"},"App\\Models"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Model;")," importan las clases ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel, necesarias para definir un modelo."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la clase ",(0,i.kt)("inlineCode",{parentName:"strong"},"Denominacion")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Denominacion extends Model\n{\n    use HasFactory;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class Denominacion extends Model")," define una clase llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion")," que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel. Esto convierte a ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion")," en un modelo Eloquent, lo que permite interactuar con la base de datos de forma sencilla y fluida."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use HasFactory;")," permite utilizar las f\xe1bricas de modelos de Laravel para generar instancias del modelo para pruebas y seeding (poblamiento de la base de datos con datos de prueba)."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Propiedad ",(0,i.kt)("inlineCode",{parentName:"strong"},"$table")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'protected $table = "Denominaciones";\n')),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'protected $table = "Denominaciones";')," especifica el nombre de la tabla en la base de datos que este modelo representa. En este caso, el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion")," est\xe1 asociado con la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominaciones"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Propiedad ",(0,i.kt)("inlineCode",{parentName:"strong"},"$fillable")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"protected $fillable = ['nombre', 'descripcion'];\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected $fillable = ['nombre', 'descripcion'];")," define un arreglo de atributos que se pueden asignar de manera masiva. Esto ayuda a prevenir vulnerabilidades de asignaci\xf3n masiva, especificando solo los campos ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion")," como asignables."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Relaci\xf3n ",(0,i.kt)("inlineCode",{parentName:"strong"},"producto")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Define la relaci\xf3n uno a muchos con el modelo Producto.\n */\npublic function producto()\n{\n    return $this->hasMany('App\\Models\\Producto');\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function producto()")," define un m\xe9todo que establece una relaci\xf3n uno a muchos con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"return $this->hasMany('App\\Models\\Producto');")," indica que una ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion")," puede tener muchos ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),"s asociados. La relaci\xf3n se define utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"hasMany"),", que es una caracter\xedstica de Eloquent para modelar relaciones en la base de datos.")))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, este c\xf3digo define un modelo ",(0,i.kt)("inlineCode",{parentName:"p"},"Denominacion")," en Laravel que:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Extiende la clase base ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Eloquent."),(0,i.kt)("li",{parentName:"ul"},"Usa el trait ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," para habilitar la generaci\xf3n de instancias para pruebas."),(0,i.kt)("li",{parentName:"ul"},"Est\xe1 asociado con la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominaciones")," en la base de datos."),(0,i.kt)("li",{parentName:"ul"},"Permite la asignaci\xf3n masiva de los campos ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,i.kt)("li",{parentName:"ul"},"Define una relaci\xf3n uno a muchos con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),", indicando que una denominaci\xf3n puede tener m\xfaltiples productos asociados."))),(0,i.kt)("h3",{id:"tipo"},"Tipo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Tipo extends Model\n{\n    use HasFactory;\n\n    protected $fillable=['nombre','descripcion'];\n\n    public function producto()\n    {\n        return $this->hasMany('App\\Models\\Producto');\n    }\n}\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Espacio de nombres y uso de clases"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace App\\Models;")," define el espacio de nombres para la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo"),", indicando que pertenece al directorio ",(0,i.kt)("inlineCode",{parentName:"li"},"App\\Models"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Model;")," importan las clases ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel, necesarias para definir un modelo."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la clase ",(0,i.kt)("inlineCode",{parentName:"strong"},"Tipo")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Tipo extends Model\n{\n    use HasFactory;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class Tipo extends Model")," define una clase llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo")," que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel. Esto convierte a ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo")," en un modelo Eloquent, lo que permite interactuar con la base de datos de forma sencilla y fluida."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use HasFactory;")," permite utilizar las f\xe1bricas de modelos de Laravel para generar instancias del modelo para pruebas y seeding (poblamiento de la base de datos con datos de prueba)."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Propiedad ",(0,i.kt)("inlineCode",{parentName:"strong"},"$fillable")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"protected $fillable = ['nombre', 'descripcion'];\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected $fillable = ['nombre', 'descripcion'];")," define un arreglo de atributos que se pueden asignar de manera masiva. Esto ayuda a prevenir vulnerabilidades de asignaci\xf3n masiva, especificando solo los campos ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion")," como asignables."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Relaci\xf3n ",(0,i.kt)("inlineCode",{parentName:"strong"},"producto")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function producto()\n{\n    return $this->hasMany('App\\Models\\Producto');\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function producto()")," define un m\xe9todo que establece una relaci\xf3n uno a muchos con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"return $this->hasMany('App\\Models\\Producto');")," indica que un ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo")," puede tener muchos ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),"s asociados. La relaci\xf3n se define utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"hasMany"),", que es una caracter\xedstica de Eloquent para modelar relaciones en la base de datos.")))),(0,i.kt)("p",{parentName:"admonition"},"En concllusi\xf3n, este c\xf3digo define un modelo ",(0,i.kt)("inlineCode",{parentName:"p"},"Tipo")," en Laravel que:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Extiende la clase base ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Eloquent."),(0,i.kt)("li",{parentName:"ul"},"Usa el trait ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," para habilitar la generaci\xf3n de instancias para pruebas."),(0,i.kt)("li",{parentName:"ul"},"Permite la asignaci\xf3n masiva de los campos ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,i.kt)("li",{parentName:"ul"},"Define una relaci\xf3n uno a muchos con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),", indicando que un tipo puede tener m\xfaltiples productos asociados."))),(0,i.kt)("h3",{id:"producto"},"Producto"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Producto extends Model\n{\n    use HasFactory;\n\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'productos';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'nombre',\n        'bodega',\n        'descripcion',\n        'maridaje',\n        'precio',\n        'graduacion',\n        'ano',\n        'sabor',\n        'tipo_id',\n        'imagen',\n        'denominacion_id',\n    ];\n\n    /**\n     * Get the tipo that owns the producto.\n     */\n    public function tipo()\n    {\n        return $this->belongsTo(Tipo::class);\n    }\n\n    /**\n     * Get the denominacion that owns the producto.\n     */\n    public function denominacion()\n    {\n        return $this->belongsTo(Denominacion::class);\n    }\n}\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Espacio de nombres y uso de clases"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace App\\Models;")," define el espacio de nombres para la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto"),", indicando que pertenece al directorio ",(0,i.kt)("inlineCode",{parentName:"li"},"App\\Models"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Eloquent\\Model;")," importan las clases ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel, necesarias para definir un modelo."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la clase ",(0,i.kt)("inlineCode",{parentName:"strong"},"Producto")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Producto extends Model\n{\n    use HasFactory;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class Producto extends Model")," define una clase llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto")," que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Laravel. Esto convierte a ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto")," en un modelo Eloquent, lo que permite interactuar con la base de datos de forma sencilla y fluida."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use HasFactory;")," permite utilizar las f\xe1bricas de modelos de Laravel para generar instancias del modelo para pruebas y seeding (poblamiento de la base de datos con datos de prueba)."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Propiedad ",(0,i.kt)("inlineCode",{parentName:"strong"},"$table")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The table associated with the model.\n *\n * @var string\n */\nprotected $table = 'productos';\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected $table = 'productos';")," especifica el nombre de la tabla en la base de datos que este modelo representa. En este caso, el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto")," est\xe1 asociado con la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"productos"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Propiedad ",(0,i.kt)("inlineCode",{parentName:"strong"},"$fillable")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The attributes that are mass assignable.\n *\n * @var array\n */\nprotected $fillable = [\n    'nombre',\n    'bodega',\n    'descripcion',\n    'maridaje',\n    'precio',\n    'graduacion',\n    'ano',\n    'sabor',\n    'tipo_id',\n    'imagen',\n    'denominacion_id',\n];\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected $fillable = [...]")," define un arreglo de atributos que se pueden asignar de manera masiva. Esto ayuda a prevenir vulnerabilidades de asignaci\xf3n masiva, especificando los campos que se pueden asignar de forma segura."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Relaci\xf3n ",(0,i.kt)("inlineCode",{parentName:"strong"},"tipo")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Get the tipo that owns the producto.\n */\npublic function tipo()\n{\n    return $this->belongsTo(Tipo::class);\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function tipo()")," define un m\xe9todo que establece una relaci\xf3n de pertenencia con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"return $this->belongsTo(Tipo::class);")," indica que cada ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto")," pertenece a un ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo"),". La relaci\xf3n se define utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"belongsTo"),", que es una caracter\xedstica de Eloquent para modelar relaciones en la base de datos."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Relaci\xf3n ",(0,i.kt)("inlineCode",{parentName:"strong"},"denominacion")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Get the denominacion that owns the producto.\n */\npublic function denominacion()\n{\n    return $this->belongsTo(Denominacion::class);\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function denominacion()")," define un m\xe9todo que establece una relaci\xf3n de pertenencia con el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"return $this->belongsTo(Denominacion::class);")," indica que cada ",(0,i.kt)("inlineCode",{parentName:"li"},"Producto")," pertenece a una ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion"),". La relaci\xf3n se define utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"belongsTo"),", que es una caracter\xedstica de Eloquent para modelar relaciones en la base de datos.")))),(0,i.kt)("p",{parentName:"admonition"},"Este c\xf3digo define un modelo ",(0,i.kt)("inlineCode",{parentName:"p"},"Producto")," en Laravel que:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Extiende la clase base ",(0,i.kt)("inlineCode",{parentName:"li"},"Model")," de Eloquent."),(0,i.kt)("li",{parentName:"ul"},"Usa el trait ",(0,i.kt)("inlineCode",{parentName:"li"},"HasFactory")," para habilitar la generaci\xf3n de instancias para pruebas."),(0,i.kt)("li",{parentName:"ul"},"Est\xe1 asociado con la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"productos")," en la base de datos."),(0,i.kt)("li",{parentName:"ul"},"Permite la asignaci\xf3n masiva de los campos ",(0,i.kt)("inlineCode",{parentName:"li"},"nombre"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bodega"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"descripcion"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"maridaje"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"precio"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"graduacion"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ano"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sabor"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"tipo_id"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"imagen")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"denominacion_id"),"."),(0,i.kt)("li",{parentName:"ul"},"Define relaciones de pertenencia con los modelos ",(0,i.kt)("inlineCode",{parentName:"li"},"Tipo")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"Denominacion"),", indicando que un producto pertenece a un tipo y a una denominaci\xf3n."))),(0,i.kt)("h2",{id:"seeders"},"Seeders"),(0,i.kt)("h3",{id:"denominacionseeder"},"DenominacionSeeder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass DenominacioSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        $data = [\n            [\n                "nombre" => "Jumilla",\n                "descripcion" => "Jumilla"\n            ],\n            [\n                "nombre" => "Rioja",\n                "descripcion" => "Rioja"\n            ],\n            [\n                "nombre" => "Rivera del Duero",\n                "descripcion" => "Duero"\n            ],\n            [\n                "nombre" => "Rueda",\n                "descripcion" => "Rueda"\n            ],\n            [\n                "nombre" => "Toro",\n                "descripcion" => "Toro"\n            ],\n            [\n                "nombre" => "Cava",\n                "descripcion" => "Cava"\n            ],\n            [\n                "nombre" => "Alella",\n                "descripcion" => "Alella"\n            ],\n            [\n                "nombre" => "Pened\xe9s",\n                "descripcion" => "Pened\xe9s"\n            ],\n        ];\n        DB::table(\'denominaciones\')->insert($data);\n        //\n    }\n}\n')),(0,i.kt)("admonition",{title:"Explicaci\xf3n del c\xf3digo",type:"info"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Espacio de nombres y uso de clases"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"namespace Database\\Seeders;\n\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace Database\\Seeders;")," define el espacio de nombres para la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"DenominacioSeeder"),", indicando que pertenece al directorio ",(0,i.kt)("inlineCode",{parentName:"li"},"Database\\Seeders"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Seeder;")," importan clases relacionadas con el seeding de bases de datos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Support\\Facades\\DB;")," importa el facade ",(0,i.kt)("inlineCode",{parentName:"li"},"DB")," que proporciona m\xe9todos para interactuar con la base de datos."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la clase ",(0,i.kt)("inlineCode",{parentName:"strong"},"DenominacioSeeder")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class DenominacioSeeder extends Seeder\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class DenominacioSeeder extends Seeder")," define una clase llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"DenominacioSeeder")," que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Seeder")," de Laravel. Esto permite utilizar las funcionalidades de seeding para poblar la base de datos con datos iniciales."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"run")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Run the database seeds.\n */\npublic function run(): void\n{\n    $data = [\n        [\n            "nombre" => "Jumilla",\n            "descripcion" => "Jumilla"\n        ],\n        [\n            "nombre" => "Rioja",\n            "descripcion" => "Rioja"\n        ],\n        [\n            "nombre" => "Rivera del Duero",\n            "descripcion" => "Duero"\n        ],\n        [\n            "nombre" => "Rueda",\n            "descripcion" => "Rueda"\n        ],\n        [\n            "nombre" => "Toro",\n            "descripcion" => "Toro"\n        ],\n        [\n            "nombre" => "Cava",\n            "descripcion" => "Cava"\n        ],\n        [\n            "nombre" => "Alella",\n            "descripcion" => "Alella"\n        ],\n        [\n            "nombre" => "Pened\xe9s",\n            "descripcion" => "Pened\xe9s"\n        ],\n    ];\n    DB::table(\'denominaciones\')->insert($data);\n}\n')),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," se ejecuta cuando se aplica el seeder. Su prop\xf3sito es insertar datos en la base de datos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function run(): void")," define el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," que no retorna ning\xfan valor (",(0,i.kt)("inlineCode",{parentName:"li"},"void"),")."),(0,i.kt)("li",{parentName:"ul"},"Se define un arreglo ",(0,i.kt)("inlineCode",{parentName:"li"},"$data")," que contiene varios arreglos asociativos. Cada arreglo asociativo representa un registro que ser\xe1 insertado en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DB::table('denominaciones')->insert($data);")," inserta los datos definidos en ",(0,i.kt)("inlineCode",{parentName:"li"},"$data")," en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones")," usando el facade ",(0,i.kt)("inlineCode",{parentName:"li"},"DB"),".")))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, este c\xf3digo define un seeder ",(0,i.kt)("inlineCode",{parentName:"p"},"DenominacioSeeder")," en Laravel que:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Extiende la clase base ",(0,i.kt)("inlineCode",{parentName:"li"},"Seeder")," de Laravel."),(0,i.kt)("li",{parentName:"ul"},"Define un m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," que inserta m\xfaltiples registros en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"denominaciones")," de la base de datos."),(0,i.kt)("li",{parentName:"ul"},'Los datos insertados son nombres y descripciones de diferentes denominaciones de origen, como "Jumilla", "Rioja", "Rivera del Duero", etc.')),(0,i.kt)("p",{parentName:"admonition"},"Este seeder puede ser ejecutado usando el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan db:seed --class=DenominacioSeeder")," para poblar la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"denominaciones")," con los datos especificados."),(0,i.kt)("h3",{parentName:"admonition",id:"tiposeeder"},"TipoSeeder"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass TipoSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run()\n    {\n        $data=[\n            [\n            "nombre"=>"Blanco",\n            "descripcion"=>"Blanco"\n            ],\n            [\n                "nombre"=>"Tinto",\n                "descripcion"=>"Tinto"\n                ],\n            [\n            "nombre"=>"Rosado",\n            "descripcion"=>"Rosado"\n            ],\n            [\n            "nombre"=>"Cava",\n            "descripcion"=>"Cava"\n            ],\n            [\n            "nombre"=>"Bloque IV",\n            "descripcion"=>"Sistemas y comunicaciones"\n            ],\n        ];\n        DB::table(\'tipos\')->insert($data);\n    }\n}\n')),(0,i.kt)("h3",{parentName:"admonition",id:"userseeder"},"UserSeeder"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse App\\Models\\User; // Aseg\xfarate de importar el modelo User\nuse Faker\\Factory as Faker;\n\nclass UsersSeeder extends Seeder\n{\n    public function run()\n    {\n        \n        //Crear usuario administrador\n        User::create([\n            'name' => 'admin',\n            'email' => 'admin@test.com',\n            'password' => bcrypt('admin_password'), // Puedes establecer una contrase\xf1a predeterminada\n              \n        ]);\n        \n        $faker = Faker::create();\n\n        // Genera 20 usuarios de prueba\n        for ($i = 0; $i < 20; $i++) {\n            User::create([\n                'name' => $faker->name,\n                'email' => $faker->unique()->safeEmail,\n                'password' => bcrypt('password') // Puedes establecer una contrase\xf1a predeterminada\n            ]);\n        }\n    }\n}\n"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Espacio de nombres y uso de clases"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"namespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse App\\Models\\User; // Aseg\xfarate de importar el modelo User\nuse Faker\\Factory as Faker;\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace Database\\Seeders;")," define el espacio de nombres para la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"UsersSeeder"),", indicando que pertenece al directorio ",(0,i.kt)("inlineCode",{parentName:"li"},"Database\\Seeders"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Illuminate\\Database\\Seeder;")," importa la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Seeder")," de Laravel, que es la clase base para todos los seeders."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use App\\Models\\User;")," importa el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),", que se utilizar\xe1 para crear registros en la tabla de usuarios."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use Faker\\Factory as Faker;")," importa la f\xe1brica de Faker, una biblioteca utilizada para generar datos falsos."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Definici\xf3n de la clase ",(0,i.kt)("inlineCode",{parentName:"strong"},"UsersSeeder")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class UsersSeeder extends Seeder\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class UsersSeeder extends Seeder")," define una clase llamada ",(0,i.kt)("inlineCode",{parentName:"li"},"UsersSeeder")," que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Seeder")," de Laravel. Esto permite utilizar las funcionalidades de seeding para poblar la base de datos con datos iniciales."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"M\xe9todo ",(0,i.kt)("inlineCode",{parentName:"strong"},"run")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public function run()\n{\n    //Crear usuario administrador\n    User::create([\n        'name' => 'admin',\n        'email' => 'admin@test.com',\n        'password' => bcrypt('admin_password'), // Puedes establecer una contrase\xf1a predeterminada\n    ]);\n    \n    $faker = Faker::create();\n\n    // Genera 20 usuarios de prueba\n    for ($i = 0; $i < 20; $i++) {\n        User::create([\n            'name' => $faker->name,\n            'email' => $faker->unique()->safeEmail,\n            'password' => bcrypt('password') // Puedes establecer una contrase\xf1a predeterminada\n        ]);\n    }\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public function run()")," define el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run"),", que se ejecuta cuando se aplica el seeder. Su prop\xf3sito es insertar datos en la base de datos."),(0,i.kt)("li",{parentName:"ul"},"La primera acci\xf3n dentro del m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," es crear un usuario administrador con datos predefinidos:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"User::create([\n    'name' => 'admin',\n    'email' => 'admin@test.com',\n    'password' => bcrypt('admin_password'), // Puedes establecer una contrase\xf1a predeterminada\n]);\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"User::create([...])")," crea un nuevo registro en la tabla ",(0,i.kt)("inlineCode",{parentName:"li"},"users")," utilizando el modelo ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bcrypt('admin_password')")," encripta la contrase\xf1a para almacenarla de forma segura."))),(0,i.kt)("li",{parentName:"ul"},"Luego, se crea una instancia de Faker para generar datos falsos:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"$faker = Faker::create();\n"))),(0,i.kt)("li",{parentName:"ul"},"A continuaci\xf3n, se utiliza un bucle ",(0,i.kt)("inlineCode",{parentName:"li"},"for")," para generar 20 usuarios de prueba:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"for ($i = 0; $i < 20; $i++) {\n    User::create([\n        'name' => $faker->name,\n        'email' => $faker->unique()->safeEmail,\n        'password' => bcrypt('password') // Puedes establecer una contrase\xf1a predeterminada\n    ]);\n}\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Dentro del bucle, ",(0,i.kt)("inlineCode",{parentName:"li"},"User::create([...])")," crea un nuevo usuario con datos generados por Faker."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," se genera utilizando ",(0,i.kt)("inlineCode",{parentName:"li"},"$faker->name"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email")," se genera utilizando ",(0,i.kt)("inlineCode",{parentName:"li"},"$faker->unique()->safeEmail")," para asegurar que cada correo electr\xf3nico sea \xfanico."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," se establece como ",(0,i.kt)("inlineCode",{parentName:"li"},"'password'")," y se encripta utilizando ",(0,i.kt)("inlineCode",{parentName:"li"},"bcrypt"),".")))))),(0,i.kt)("p",null,"En resumen, este c\xf3digo define un seeder ",(0,i.kt)("inlineCode",{parentName:"p"},"UsersSeeder")," en Laravel que:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extiende la clase base ",(0,i.kt)("inlineCode",{parentName:"li"},"Seeder")," de Laravel."),(0,i.kt)("li",{parentName:"ul"},"Define un m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," que crea un usuario administrador con datos predefinidos."),(0,i.kt)("li",{parentName:"ul"},"Utiliza la biblioteca Faker para generar y crear 20 usuarios de prueba con nombres y correos electr\xf3nicos aleatorios, y contrase\xf1as predeterminadas encriptadas.")),(0,i.kt)("p",null,"Este seeder puede ser ejecutado usando el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan db:seed --class=UsersSeeder")," para poblar la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," con los datos especificados.\n:::"),(0,i.kt)("h3",{id:"databaseseeder"},"DatabaseSeeder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\User;\n// use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     */\n    public function run(): void\n    {\n        // User::factory(10)->create();\n\n        $this->call(TipoSeeder::class);\n        $this->call(DenominacioSeeder::class);\n        $this->call(UsersSeeder::class);\n      \n    }\n}\n")),(0,i.kt)("h2",{id:"controllers"},"Controllers"),(0,i.kt)("h3",{id:"denominacioncontroller"},"DenominacionController"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Denominacion;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass DenominacionController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index()\n    {\n        $denominaciones = Denominacion::all();\n        return response()->json($denominaciones);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'descripcion' => 'required|string|max:1000',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $denominacion = Denominacion::create($validator->validated());\n\n        return response()->json($denominacion, 201);\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show($id)\n    {\n        $denominacion = Denominacion::findOrFail($id);\n        return response()->json($denominacion);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(Request $request, $id)\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'descripcion' => 'required|string|max:1000',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $denominacion = Denominacion::find($id);\n        if ($denominacion) {\n            $denominacion->update($request->all());\n            return response()->json($denominacion);\n        } else {\n            return response()->json(['message' => 'Denominaci\xf3n no encontrada'], 404);\n        }\n        return response()->json($denominacion);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy($id)\n    {\n        $denominacion = Denominacion::findOrFail($id);\n        $denominacion->delete();\n\n        return response()->json(null, 204);\n    }\n}\n")),(0,i.kt)("h3",{id:"tipocontroller"},"TipoController"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Tipo;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass TipoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index()\n    {\n        $tipos = Tipo::all();\n        return response()->json($tipos);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'descripcion' => 'required|string|max:1000',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $tipo = Tipo::create($validator->validated());\n\n        return response()->json($tipo, 201);\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show($id)\n    {\n        $tipo = Tipo::findOrFail($id);\n        return response()->json($tipo);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(Request $request, $id)\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'descripcion' => 'required|string|max:1000',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $tipo = Tipo::find($id);\n        if ($tipo) {\n            $tipo->update($request->all());\n            return response()->json($tipo);\n        } else {\n            return response()->json(['message' => 'Tipo no encontrada'], 404);\n        }\n\n    \n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy($id)\n    {\n        $tipo = Tipo::find($id);\n        if($tipo){\n            $tipo->delete();\n            return response()->json(null, 204);\n        }\n        return response()->json(null, 404);\n    }\n}\n")),(0,i.kt)("h3",{id:"productocontroller"},"ProductoController"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ProductoController extends Controller\n{\n    public function index(Request $request): JsonResponse\n    {\n        $perPage = $request->query('per_page', 15); // N\xfamero de elementos por p\xe1gina, por defecto 15\n        $productos = Producto::paginate($perPage);\n        return response()->json($productos);\n    }\n\n    public function store(Request $request): JsonResponse\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'bodega' => 'nullable|string|max:255',\n            'descripcion' => 'required|string',\n            'maridaje' => 'required|string',\n            'precio' => 'required|numeric',\n            'graduacion' => 'required|numeric',\n            'ano' => 'nullable|integer',\n            'sabor' => 'nullable|string|max:255',\n            'tipo_id' => 'required|exists:tipos,id',\n            'file' => 'required|image|mimes:jpeg,png,jpg,gif|max:2048',\n            'denominacion_id' => 'required|exists:denominaciones,id',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        // Procesar y guardar la imagen\n        $fileUrl = null;\n        if ($request->hasFile('file')) {\n            $filePath = $request->file('file')->store('imagenes', 'public');\n            $fileUrl = url('storage/' . $filePath);\n        }\n\n        $producto = Producto::create([\n            'nombre' => $request->nombre,\n            'bodega' => $request->bodega,\n            'descripcion' => $request->descripcion,\n            'maridaje' => $request->maridaje,\n            'precio' => $request->precio,\n            'graduacion' => $request->graduacion,\n            'ano' => $request->ano,\n            'sabor' => $request->sabor,\n            'tipo_id' => $request->tipo_id,\n            'imagen' => $fileUrl ?? null,\n            'denominacion_id' => $request->denominacion_id,\n        ]);\n\n        return response()->json($producto, 201); // 201 Created\n    }\n\n    public function show($id): JsonResponse\n    {\n        $producto = Producto::find($id);\n        if (!$producto) {\n            return response()->json(['message' => 'Producto no encontrado'], 404);\n        }\n\n        return response()->json($producto);\n    }\n\n    public function update(Request $request, Producto $producto): JsonResponse\n    {\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|string|max:255',\n            'bodega' => 'nullable|string|max:255',\n            'descripcion' => 'required|string',\n            'maridaje' => 'required|string',\n            'precio' => 'required|numeric',\n            'graduacion' => 'required|numeric',\n            'ano' => 'nullable|integer',\n            'sabor' => 'nullable|string|max:255',\n            'tipo_id' => 'required|exists:tipos,id',\n            'denominacion_id' => 'required|exists:denominaciones,id',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        // Procesar y guardar la nueva imagen si se ha cargado\n        if ($request->hasFile('file')) {\n            // Eliminar la imagen antigua si existe\n            if ($producto->imagen) {\n                Storage::disk('public')->delete($producto->imagen);\n            }\n\n            // Guardar la nueva imagen\n            $filePath = $request->file('file')->store('imagenes', 'public');\n            $producto->imagen = $filePath;\n        }\n\n        $producto->update($validator->validated());\n\n        return response()->json($producto);\n    }\n\n    public function destroy($id): JsonResponse\n    {\n        $producto = Producto::find($id);\n        if (!$producto) {\n            return response()->json(['message' => 'Producto no encontrado'], 404);\n        }\n\n        // Eliminar la imagen asociada si existe\n        if ($producto->imagen) {\n            $imagePath = 'imagenes/' . basename($producto->imagen);\n            if (Storage::disk('public')->exists($imagePath)) {\n                Storage::disk('public')->delete($imagePath);\n            }\n        }\n\n        $producto->delete();\n\n        return response()->json(null, 204); // 204 No Content\n    }\n}\n\n")))}c.isMDXComponent=!0}}]);