"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[786],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>k});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),u=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=u(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?t.createElement(k,o(o({ref:a},p),{},{components:n})):t.createElement(k,o({ref:a},p))}));function k(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3e3:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var t=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},o="Laravel Sanctum",l={unversionedId:"Anexo/sanctum",id:"Anexo/sanctum",title:"Laravel Sanctum",description:"Introducci\xf3n",source:"@site/docs/Anexo/sanctum.md",sourceDirName:"Anexo",slug:"/Anexo/sanctum",permalink:"/api_vinos_doc/docs/Anexo/sanctum",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Anexo/sanctum.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Instalaci\xf3n de Laravel 11",permalink:"/api_vinos_doc/docs/Anexo/Instalacion"},next:{title:"Aplicaci\xf3n de Ejemplo",permalink:"/api_vinos_doc/docs/Anexo/aplicacion"}},s={},u=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Instalaci\xf3n y configuraci\xf3n",id:"instalaci\xf3n-y-configuraci\xf3n",level:2},{value:"Model User",id:"model-user",level:3},{value:"An\xe1lisis del c\xf3digo",id:"an\xe1lisis-del-c\xf3digo",level:4},{value:"El archivo de arranque de la aplicaci\xf3n",id:"el-archivo-de-arranque-de-la-aplicaci\xf3n",level:3},{value:"bootstrap/app.php",id:"bootstrapappphp",level:4},{value:"Creaci\xf3n de AuthController",id:"creaci\xf3n-de-authcontroller",level:3},{value:"Configuraci\xf3n de sanctum",id:"configuraci\xf3n-de-sanctum",level:3},{value:"Rutas protegidas con <strong>sanctum</strong>.",id:"rutas-protegidas-con-sanctum",level:3},{value:"C\xf3digo definitivo",id:"c\xf3digo-definitivo",level:3}],p={toc:u},c="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(c,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"laravel-sanctum"},"Laravel Sanctum"),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"Laravel Sanctum fue creado para resolver dos problemas separados. Vamos a discutir cada uno antes de profundizar en la biblioteca."),(0,r.kt)("p",null,'Tokens de API\nPrimero, Sanctum es un paquete simple que puedes usar para emitir tokens de API a tus usuarios sin la complicaci\xf3n de OAuth. Esta caracter\xedstica est\xe1 inspirada en GitHub y otras aplicaciones que emiten "tokens de acceso personal". Por ejemplo, imagina que la "configuraci\xf3n de la cuenta" de tu aplicaci\xf3n tiene una pantalla donde un usuario puede generar un token de API para su cuenta. Puedes usar Sanctum para generar y gestionar esos tokens. Estos tokens suelen tener un tiempo de expiraci\xf3n muy largo (a\xf1os), pero pueden ser revocados manualmente por el usuario en cualquier momento.'),(0,r.kt)("p",null,"Laravel Sanctum ofrece esta funci\xf3n almacenando los tokens de API del usuario en una \xfanica tabla de base de datos y autenticando las solicitudes HTTP entrantes a trav\xe9s del encabezado de Autorizaci\xf3n, que deber\xeda contener un token de API v\xe1lido."),(0,r.kt)("p",null,"Autenticaci\xf3n de SPA (Aplicaciones de P\xe1gina \xdanica)\nSegundo, Sanctum existe para ofrecer una forma sencilla de autenticar aplicaciones de p\xe1gina \xfanica (SPAs) que necesitan comunicarse con una API alimentada por Laravel. Estas SPAs pueden existir en el mismo repositorio que tu aplicaci\xf3n Laravel o pueden ser un repositorio completamente separado, como una SPA creada usando Vue CLI o una aplicaci\xf3n Next.js."),(0,r.kt)("p",null,"Para esta caracter\xedstica, Sanctum no utiliza tokens de ning\xfan tipo. En su lugar, Sanctum utiliza los servicios de autenticaci\xf3n de sesi\xf3n basados en cookies integrados en Laravel. T\xedpicamente, Sanctum utiliza el guardia de autenticaci\xf3n web de Laravel para lograr esto. Esto proporciona los beneficios de protecci\xf3n contra CSRF, autenticaci\xf3n de sesi\xf3n, as\xed como protecci\xf3n contra la filtraci\xf3n de las credenciales de autenticaci\xf3n a trav\xe9s de XSS."),(0,r.kt)("p",null,"Sanctum solo intentar\xe1 autenticar usando cookies cuando la solicitud entrante provenga de tu propio frontend de SPA. Cuando Sanctum examina una solicitud HTTP entrante, primero buscar\xe1 una cookie de autenticaci\xf3n y, si no est\xe1 presente, entonces examinar\xe1 el encabezado de Autorizaci\xf3n en busca de un token de API v\xe1lido."),(0,r.kt)("h2",{id:"instalaci\xf3n-y-configuraci\xf3n"},"Instalaci\xf3n y configuraci\xf3n"),(0,r.kt)("p",null,'En la versi\xf3n 11 de Laravel, no se instala por defecto el c\xf3digo necesario para desarrollar APIs; se deja como una opci\xf3n para el desarrollador. Sin embargo, puedes instalar Laravel Sanctum, una herramienta popular para la autenticaci\xf3n de APIs, utilizando el comando Artisan "install:api".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan install:api\n")),(0,r.kt)("h3",{id:"model-user"},"Model User"),(0,r.kt)("p",null,"Debe cambiar el c\xf3digo del modelo ",(0,r.kt)("strong",{parentName:"p"},"User")," por este otro:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=app\\Models\\User.php",title:"app\\Models\\User.php"},"<?php\n\nnamespace App\\Models;\n\n// use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<int, string>\n     */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n     * Get the attributes that should be cast.\n     *\n     * @return array<string, string>\n     */\n    protected function casts(): array\n    {\n        return [\n            'email_verified_at' => 'datetime',\n            'password' => 'hashed',\n        ];\n    }\n}\n")),(0,r.kt)("h4",{id:"an\xe1lisis-del-c\xf3digo"},"An\xe1lisis del c\xf3digo"),(0,r.kt)("p",null,"Cambio del modelo User."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"namespace App\\Models;\n")),(0,r.kt)("p",null,"Esta l\xednea define el espacio de nombres en el que se encuentra la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),". En este caso, la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," se encuentra en el directorio ",(0,r.kt)("inlineCode",{parentName:"p"},"App\\Models"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\n")),(0,r.kt)("p",null,"Estas l\xedneas importan y utilizan los rasgos (traits) necesarios para el modelo de usuario:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HasFactory"),': Este trait proporciona m\xe9todos para la creaci\xf3n de "factories", que son \xfatiles para generar datos de prueba.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Authenticatable"),": Este trait proporciona m\xe9todos de autenticaci\xf3n para el modelo de usuario. Laravel utiliza este trait para gestionar la autenticaci\xf3n de usuarios."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Notifiable"),": Este trait agrega funcionalidad para enviar notificaciones por correo electr\xf3nico, SMS, Slack, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HasApiTokens"),": Este trait habilita la funcionalidad de tokens de API utilizando Laravel Sanctum para autenticaci\xf3n API.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class User extends Authenticatable\n")),(0,r.kt)("p",null,"Esta l\xednea define la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," que extiende ",(0,r.kt)("inlineCode",{parentName:"p"},"Authenticatable"),", lo que significa que el modelo de usuario puede aprovechar los m\xe9todos proporcionados por ",(0,r.kt)("inlineCode",{parentName:"p"},"Authenticatable"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"{\n    use HasApiTokens, HasFactory, Notifiable;\n")),(0,r.kt)("p",null,"Esto aplica los rasgos (traits) a la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),", lo que le permite utilizar los m\xe9todos y funcionalidades proporcionados por estos rasgos."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * The attributes that are mass assignable.\n *\n * @var array<int, string>\n */\nprotected $fillable = [\n    'name',\n    'email',\n    'password',\n];\n")),(0,r.kt)("p",null,"Esta propiedad ",(0,r.kt)("inlineCode",{parentName:"p"},"$fillable")," especifica qu\xe9 atributos pueden ser asignados masivamente (es decir, utilizando el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," en el modelo). En este caso, los atributos ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"email")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," pueden ser asignados masivamente."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * The attributes that should be hidden for serialization.\n *\n * @var array<int, string>\n */\nprotected $hidden = [\n    'password',\n    'remember_token',\n];\n")),(0,r.kt)("p",null,"Esta propiedad ",(0,r.kt)("inlineCode",{parentName:"p"},"$hidden")," especifica qu\xe9 atributos deben ser ocultos cuando el modelo se serializa a un array o a JSON. En este caso, oculta la contrase\xf1a (",(0,r.kt)("inlineCode",{parentName:"p"},"password"),") y el token de recordatorio (",(0,r.kt)("inlineCode",{parentName:"p"},"remember_token"),"), lo que garantiza que no se devuelvan accidentalmente en respuestas API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'email_verified_at' => 'datetime',\n        'password' => 'hashed',\n    ];\n}\n")),(0,r.kt)("p",null,"Este m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"casts()")," define c\xf3mo deben ser tratados los atributos del modelo al serializarse o deserializarse. En este caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"email_verified_at")," se convierte autom\xe1ticamente a un objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"datetime"),", y ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," se trata como un campo hash. Esto asegura que Laravel maneje autom\xe1ticamente la conversi\xf3n de estos atributos al formato adecuado cuando se trabaja con el modelo."),(0,r.kt)("h3",{id:"el-archivo-de-arranque-de-la-aplicaci\xf3n"},"El archivo de arranque de la aplicaci\xf3n"),(0,r.kt)("p",null,"La configuraci\xf3n de la aplicaci\xf3n de Laravel se encuentra en el archivo ",(0,r.kt)("inlineCode",{parentName:"p"},"config/app.php"),". Desde este archivo, puedes personalizar el enrutamiento, el middleware, los proveedores de servicios, el manejo de excepciones y m\xe1s aspectos de tu aplicaci\xf3n."),(0,r.kt)("p",null,"Despu\xe9s de ejecutar el comando ",(0,r.kt)("inlineCode",{parentName:"p"},"php artisan install:api"),", el archivo ",(0,r.kt)("inlineCode",{parentName:"p"},"config/app.php")," se configurar\xe1 de la siguiente manera:"),(0,r.kt)("h4",{id:"bootstrapappphp"},"bootstrap/app.php"),(0,r.kt)("p",null,"Se ha eliminado el archivo RouteServiceProvider y ahora es reemplazado por el archivo bootstrap/app.php. Este \xfaltimo es crucial ya que configura y arranca la aplicaci\xf3n. Despu\xe9s de la instalaci\xf3n de Laravel s (parece que la oraci\xf3n qued\xf3 inconclusa), es importante asegurarse de que el archivo bootstrap/app.php est\xe9 correctamente configurado para garantizar el funcionamiento adecuado de la aplicaci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Foundation\\Application;\nuse Illuminate\\Foundation\\Configuration\\Exceptions;\nuse Illuminate\\Foundation\\Configuration\\Middleware;\n\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        api: __DIR__.'/../routes/api.php',\n        commands: __DIR__.'/../routes/console.php',\n        health: '/up',\n    )\n    ->withMiddleware(function (Middleware $middleware) {\n        // Aqu\xed puedes registrar middleware global para tu aplicaci\xf3n.\n    })\n    ->withExceptions(function (Exceptions $exceptions) {\n        // Aqu\xed puedes registrar manejadores de excepciones personalizados.\n    })->create();\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"use Illuminate\\Foundation\\Application;")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Importa la clase ",(0,r.kt)("inlineCode",{parentName:"li"},"Application")," del framework Laravel, que es responsable de manejar el ciclo de vida de la aplicaci\xf3n."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"use Illuminate\\Foundation\\Configuration\\Exceptions;")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Importa la clase ",(0,r.kt)("inlineCode",{parentName:"li"},"Exceptions"),", que se utiliza para configurar c\xf3mo la aplicaci\xf3n maneja las excepciones."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"use Illuminate\\Foundation\\Configuration\\Middleware;")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Importa la clase ",(0,r.kt)("inlineCode",{parentName:"li"},"Middleware"),", que se utiliza para configurar el middleware de la aplicaci\xf3n."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Application::configure(basePath: dirname(",(0,r.kt)("strong",{parentName:"strong"},"DIR"),"))")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Crea una nueva instancia de la aplicaci\xf3n Laravel y establece la ruta base de la aplicaci\xf3n al directorio padre del directorio actual."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"->withRouting(...)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Configura las rutas de la aplicaci\xf3n especificando los archivos de rutas para la web, la API, los comandos de consola y un punto de verificaci\xf3n de salud."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"->withMiddleware(...)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Permite la configuraci\xf3n de middleware global. El middleware es un mecanismo para filtrar las solicitudes HTTP entrantes en la aplicaci\xf3n."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"->withExceptions(...)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Permite la configuraci\xf3n de manejadores de excepciones personalizados. Esto es \xfatil para definir c\xf3mo la aplicaci\xf3n debe responder a diferentes tipos de errores."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"->create();")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Finaliza la configuraci\xf3n y crea la instancia de la aplicaci\xf3n.")))),(0,r.kt)("h3",{id:"creaci\xf3n-de-authcontroller"},"Creaci\xf3n de AuthController"),(0,r.kt)("p",null,"A continuaci\xf3n deber\xe1 crear el controlador ",(0,r.kt)("strong",{parentName:"p"},"AuthController"),", para ello introduzca el siguiente comando en la terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"php artisan make:Controller AuthController\n")),(0,r.kt)("p",null,"Edite el controlador y copie el siguiente codigo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app\\Http\\Controllers\\AuthController.php",title:"app\\Http\\Controllers\\AuthController.php"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AuthController extends Controller\n{\n    /**\n     * Registro de un nuevo usuario.\n     */\n    public function register(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'name' => 'required|string|max:255',\n            'email' => 'required|string|email|max:255|unique:users',\n            'password' => 'required|string|min:8',\n        ]);\n        \n        if ($validator->fails()) {\n            return response()->json(['errors' => $validator->errors()], 422);\n        }\n    \n        $user = User::create([\n            'name' => $request->name,\n            'email' => $request->email,\n            'password' => Hash::make($request->password),\n        ]);\n        \n        return response()->json([\n            'user' => $user,\n            'token' => $user->createToken('authToken')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Inicio de sesi\xf3n y obtenci\xf3n del token.\n     */\n    public function login(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'email' => 'required|email',\n            'password' => 'required',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['errors' => $validator->errors()], 422);\n        }\n\n        $user = User::where('email', $request->email)->first();\n\n        if (!$user || !Hash::check($request->password, $user->password)) {\n            return response()->json(['errors' => ['email' => ['Las credenciales proporcionadas son incorrectas.']]], 422);\n        }\n\n        return response()->json([\n            'user' => $user,\n            'token' => $user->createToken('authToken')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Refresca el token de autenticaci\xf3n.\n     */\n    public function refresh(Request $request)\n    {\n        $user = $request->user();\n        $user->tokens()->delete();\n\n        return response()->json([\n            'token' => $user->createToken('authToken')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Cierra la sesi\xf3n del usuario.\n     */\n    public function logout(Request $request)\n    {\n        $request->user()->tokens()->delete();\n\n        return response()->json(['message' => 'Sesi\xf3n cerrada correctamente.']);\n    }\n}\n\n")),(0,r.kt)("h3",{id:"configuraci\xf3n-de-sanctum"},"Configuraci\xf3n de sanctum"),(0,r.kt)("p",null," A continuacion edite el archivo de configuraci\xf3n de Laravel Sanctum."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=config\\sanctum.php",title:"config\\sanctum.php"},"<?php\n\nuse Laravel\\Sanctum\\Sanctum;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Stateful Domains\n    |--------------------------------------------------------------------------\n    |\n    | Requests from the following domains / hosts will receive stateful API\n    | authentication cookies. Typically, these should include your local\n    | and production domains which access your API via a frontend SPA.\n    |\n    */\n\n   // 'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', '*')),\n   'stateful' => [],\n    /*\n    |--------------------------------------------------------------------------\n    | Sanctum Guards\n    |--------------------------------------------------------------------------\n    |\n    | This array contains the authentication guards that will be checked when\n    | Sanctum is trying to authenticate a request. If none of these guards\n    | are able to authenticate the request, Sanctum will use the bearer\n    | token that's present on an incoming request for authentication.\n    |\n    */\n\n    'guard' => ['web'],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Expiration Minutes\n    |--------------------------------------------------------------------------\n    |\n    | This value controls the number of minutes until an issued token will be\n    | considered expired. This will override any values set in the token's\n    | \"expires_at\" attribute, but first-party sessions are not affected.\n    |\n    */\n\n    'expiration' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Token Prefix\n    |--------------------------------------------------------------------------\n    |\n    | Sanctum can prefix new tokens in order to take advantage of numerous\n    | security scanning initiatives maintained by open source platforms\n    | that notify developers if they commit tokens into repositories.\n    |\n    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning\n    |\n    */\n\n    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Sanctum Middleware\n    |--------------------------------------------------------------------------\n    |\n    | When authenticating your first-party SPA with Sanctum you may need to\n    | customize some of the middleware Sanctum uses while processing the\n    | request. You may change the middleware listed below as required.\n    |\n    */\n\n    'middleware' => [\n        'authenticate_session' => Laravel\\Sanctum\\Http\\Middleware\\AuthenticateSession::class,\n        'encrypt_cookies' => Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        'validate_csrf_token' => Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n    ],\n\n];\n")),(0,r.kt)("p",null,"Cambie el siguiente c\xf3digo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"}," // 'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', '*')),\n   'stateful' => [],\n")),(0,r.kt)("p",null,"Este c\xf3digo le indica a ",(0,r.kt)("strong",{parentName:"p"},"sanctum")," que vamos a realizar la utentificaci\xf3n por ",(0,r.kt)("strong",{parentName:"p"},"token"),"."),(0,r.kt)("h3",{id:"rutas-protegidas-con-sanctum"},"Rutas protegidas con ",(0,r.kt)("strong",{parentName:"h3"},"sanctum"),"."),(0,r.kt)("p",null,"El middleware de autenticaci\xf3n de Sanctum es una capa de seguridad que puedes aplicar a tus rutas para asegurarte de que solo los usuarios autenticados puedan acceder a ellas. Aqu\xed tienes un desglose paso a paso:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Middleware ",(0,r.kt)("inlineCode",{parentName:"strong"},"auth:sanctum"),":")," Este middleware proporcionado por Laravel Sanctum es el que utilizaremos para proteger nuestras rutas. Cuando una solicitud llega a una ruta que tiene este middleware aplicado, Laravel verificar\xe1 si el usuario est\xe1 autenticado utilizando Sanctum antes de permitir el acceso a la ruta.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Aplicar el middleware a las rutas deseadas:")," En el archivo de rutas de tu aplicaci\xf3n Laravel, por lo general ",(0,r.kt)("inlineCode",{parentName:"p"},"routes/api.php"),", puedes aplicar el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:sanctum")," a las rutas que desees proteger. Puedes aplicarlo individualmente a una ruta espec\xedfica o agruparlo para aplicarlo a un conjunto de rutas relacionadas."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"use App\\Http\\Controllers\\APIController;\nuse Illuminate\\Support\\Facades\\Route;\n\n// Ruta protegida individualmente\nRoute::middleware('auth:sanctum')->get('/user', function (Request $request) {\n    return $request->user();\n});\n\n// Grupo de rutas protegidas\nRoute::middleware('auth:sanctum')->group(function () {\n    // Aqu\xed puedes definir todas las rutas que deseas proteger\n    Route::get('/protected-route', [APIController::class, 'protectedMethod']);\n    Route::post('/another-protected-route', [APIController::class, 'anotherProtectedMethod']);\n});\n")))),(0,r.kt)("p",null,"En este ejemplo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"La ruta ",(0,r.kt)("inlineCode",{parentName:"li"},"/user")," est\xe1 protegida individualmente con el middleware ",(0,r.kt)("inlineCode",{parentName:"li"},"auth:sanctum"),". Solo los usuarios autenticados podr\xe1n acceder a esta ruta."),(0,r.kt)("li",{parentName:"ul"},"El grupo de rutas dentro de ",(0,r.kt)("inlineCode",{parentName:"li"},"Route::middleware('auth:sanctum')->group(function () { ... })")," contiene las rutas ",(0,r.kt)("inlineCode",{parentName:"li"},"/protected-route")," y ",(0,r.kt)("inlineCode",{parentName:"li"},"/another-protected-route"),". Ambas rutas est\xe1n protegidas por el middleware ",(0,r.kt)("inlineCode",{parentName:"li"},"auth:sanctum"),", lo que significa que solo los usuarios autenticados podr\xe1n acceder a ellas.")),(0,r.kt)("p",null,"Al aplicar el middleware ",(0,r.kt)("inlineCode",{parentName:"p"},"auth:sanctum")," de esta manera, puedes proteger f\xe1cilmente tus rutas API en Laravel y asegurarte de que solo los usuarios autenticados puedan acceder a ellas."),(0,r.kt)("h3",{id:"c\xf3digo-definitivo"},"C\xf3digo definitivo"),(0,r.kt)("p",null,"Nuestro c\xf3digo deber\xeda quedar asi:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"<?php\n\nuse App\\Http\\Controllers\\AuthController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:sanctum');\n\n\n\n// Rutas para la autenticaci\xf3n\nRoute::post('/register', [AuthController::class, 'register']);\nRoute::post('/login', [AuthController::class, 'login']);\n\n// Rutas protegidas por Sanctum\nRoute::middleware('auth:sanctum')->group(function () {\n    Route::post('/refresh', [AuthController::class, 'refresh']);\n    Route::post('/logout', [AuthController::class, 'logout']);\n});\n")),(0,r.kt)("p",null,"Con esto hemos llegado al final del cap\xedtulo."))}d.isMDXComponent=!0}}]);