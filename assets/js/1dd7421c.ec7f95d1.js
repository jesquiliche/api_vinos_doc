"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[58],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,y=m["".concat(s,".").concat(u)]||m[u]||c[u]||a;return t?r.createElement(y,i(i({ref:n},d),{},{components:t})):r.createElement(y,i({ref:n},d))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[m]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2782:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:4},i="Sanctum y swagger",p={unversionedId:"Anexo/swagger",id:"Anexo/swagger",title:"Sanctum y swagger",description:"\xbfQu\xe9 es Swagger?",source:"@site/docs/Anexo/swagger.md",sourceDirName:"Anexo",slug:"/Anexo/swagger",permalink:"/api_vinos_doc/docs/Anexo/swagger",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Anexo/swagger.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Aplicaci\xf3n de Ejemplo",permalink:"/api_vinos_doc/docs/Anexo/aplicacion"},next:{title:"Moonshine",permalink:"/api_vinos_doc/docs/category/moonshine"}},s={},l=[{value:"\xbfQu\xe9 es Swagger?",id:"qu\xe9-es-swagger",level:2},{value:"Instalaci\xf3n y configuraci\xf3n",id:"instalaci\xf3n-y-configuraci\xf3n",level:2},{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:3},{value:"Documentaci\xf3n controladores",id:"documentaci\xf3n-controladores",level:2},{value:"AuthController",id:"authcontroller",level:3},{value:"TipoController",id:"tipocontroller",level:3},{value:"DenominacionController",id:"denominacioncontroller",level:3},{value:"ProductoController",id:"productocontroller",level:3}],d={toc:l},m="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sanctum-y-swagger"},"Sanctum y swagger"),(0,o.kt)("h2",{id:"qu\xe9-es-swagger"},"\xbfQu\xe9 es Swagger?"),(0,o.kt)("p",null,"Swagger es un conjunto de herramientas para dise\xf1ar, construir, documentar y consumir servicios web RESTful. La especificaci\xf3n Swagger define un est\xe1ndar para la documentaci\xf3n de servicios web RESTful, que permite a los desarrolladores entender r\xe1pidamente la funcionalidad de un servicio sin acceder a su c\xf3digo fuente o comprender su l\xf3gica interna. La documentaci\xf3n Swagger se presenta en un formato f\xe1cil de leer, y tambi\xe9n puede ser utilizada para generar autom\xe1ticamente interfaces de usuario y c\xf3digo cliente para consumir los servicios."),(0,o.kt)("p",null,"Swagger proporciona una manera est\xe1ndar de describir, documentar y consumir servicios web RESTful, facilitando la interoperabilidad entre servicios desarrollados por diferentes equipos y en diferentes plataformas. La especificaci\xf3n Swagger utiliza un formato JSON o YAML para describir la API REST, y las herramientas de Swagger pueden generar documentaci\xf3n interactiva, clientes de prueba y otras utilidades basadas en esta especificaci\xf3n."),(0,o.kt)("h2",{id:"instalaci\xf3n-y-configuraci\xf3n"},"Instalaci\xf3n y configuraci\xf3n"),(0,o.kt)("p",null,"La documentaci\xf3n del paquete de instalaci\xf3n puede encontrarla en el siguiente enlace:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-&-Configuration"},"https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-&-Configuration")),(0,o.kt)("h3",{id:"instalaci\xf3n"},"Instalaci\xf3n"),(0,o.kt)("p",null,'Instalar Swagger en Laravel 11 generalmente implica el uso de una herramienta llamada "L5-Swagger", que es un paquete de Laravel que facilita la integraci\xf3n de Swagger en una aplicaci\xf3n Laravel. Aqu\xed hay una gu\xeda b\xe1sica de los pasos a seguir:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Instalar el paquete L5-Swagger:"),"\nPuedes instalar el paquete utilizando Composer. Abre una terminal en el directorio de tu proyecto Laravel y ejecuta el siguiente comando:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"composer require darkaonline/l5-swagger\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dir\xedjase al archivo ",(0,o.kt)("strong",{parentName:"p"},"config/app.php")," y a\xf1ada a la secci\xf3n de providers el siguiente c\xf3digo:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"L5Swagger\\L5SwaggerServiceProvider::class,\n")),(0,o.kt)("p",null,"   Si va a instalar ",(0,o.kt)("strong",{parentName:"p"},"swagger")," en la versi\xf3n 11, esta configuraci\xf3n cambia. Deber\xe1 editar el archivo ",(0,o.kt)("strong",{parentName:"p"},"bootstrap/providers.php")," e introducir este mismo proveedor de la siguiente forma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nreturn [\n    App\\Providers\\AppServiceProvider::class,\n    L5Swagger\\L5SwaggerServiceProvider::class\n];\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Publicar la configuraci\xf3n:"),"\nDespu\xe9s de instalar el paquete, necesitas publicar su configuraci\xf3n. Esto se puede hacer con el siguiente comando:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'php artisan vendor:publish --provider "L5Swagger\\L5SwaggerServiceProvider"\n')),(0,o.kt)("p",{parentName:"li"},"Este comando copiar\xe1 la configuraci\xf3n de Swagger al directorio ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," de tu aplicaci\xf3n Laravel.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Configurar Swagger:"),"\nAbre el archivo de configuraci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"config/l5-swagger.php")," y ajusta la configuraci\xf3n seg\xfan tus necesidades. Puedes configurar aspectos como la ruta de la documentaci\xf3n Swagger y otras opciones.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Generar la documentaci\xf3n:"),"\nDespu\xe9s de configurar L5-Swagger, puedes generar la documentaci\xf3n Swagger ejecutando el siguiente comando Artisan:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan l5-swagger:generate\n")),(0,o.kt)("p",{parentName:"li"},"Si este comando da error, vuelve a ejecutarlo despu\xe9s de documentar el primer controlador, como veremos en este mismo cap\xedtulo."),(0,o.kt)("p",{parentName:"li"},"Puedes hacer que la documentaci\xf3n se genere autom\xe1ticamente cada vez que haya un cambio, introduciendo la siguiente l\xednea en tu archivo ",(0,o.kt)("strong",{parentName:"p"},".env"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"L5_SWAGGER_GENERATE_ALWAYS=true\n")),(0,o.kt)("p",{parentName:"li"},"Esto generar\xe1 los archivos necesarios para la documentaci\xf3n de Swagger."))),(0,o.kt)("h2",{id:"documentaci\xf3n-controladores"},"Documentaci\xf3n controladores"),(0,o.kt)("h3",{id:"authcontroller"},"AuthController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\ValidationException;\n\n/**\n * @OA\\Info(\n *     title="API de mi aplicaci\xf3n",\n *     version="1.0.0",\n *     description="Descripci\xf3n de mi API",\n *     termsOfService="https://example.com/terms/",\n *     @OA\\Contact(\n *         email="contacto@example.com"\n *     ),\n *     @OA\\License(\n *         name="MIT",\n *         url="https://opensource.org/licenses/MIT"\n *     )\n * )\n * @OA\\Server(url="http://localhost:8000")\n * @OA\\SecurityScheme(\n *     securityScheme="bearerAuth",\n *     type="http",\n *     scheme="bearer",\n *     bearerFormat="JWT"\n * )\n */\nclass AuthController extends Controller\n{\n    /**\n     * Registro de un nuevo usuario.\n     */\n    /**\n     * @OA\\Post(\n     *     path="/api/register",\n     *     operationId="register",\n     *     tags={"Authentication"},\n     *     summary="Registro de un nuevo usuario",\n     *     description="Registro de un nuevo usuario en la aplicaci\xf3n",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         description="Datos del nuevo usuario",\n     *         @OA\\JsonContent(\n     *             required={"name","email","password"},\n     *             @OA\\Property(property="name", type="string", example="John Doe"),\n     *             @OA\\Property(property="email", type="string", format="email", example="john@example.com"),\n     *             @OA\\Property(property="password", type="string", format="password", example="password123")\n     *         ),\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="user", type="object"),\n     *             @OA\\Property(property="token", type="string")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validaci\xf3n fallida",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="errors", type="object")\n     *         )\n     *     )\n     * )\n     */\n    public function register(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            \'name\' => \'required|string|max:255\',\n            \'email\' => \'required|string|email|max:255|unique:users\',\n            \'password\' => \'required|string|min:8\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\'errors\' => $validator->errors()], 422);\n        }\n\n        $user = User::create([\n            \'name\' => $request->name,\n            \'email\' => $request->email,\n            \'password\' => Hash::make($request->password),\n        ]);\n\n        return response()->json([\n            \'user\' => $user,\n            \'token\' => $user->createToken(\'authToken\')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Inicio de sesi\xf3n y obtenci\xf3n del token.\n     */\n    /**\n     * @OA\\Post(\n     *     path="/api/login",\n     *     operationId="login",\n     *     tags={"Authentication"},\n     *     summary="Inicio de sesi\xf3n",\n     *     description="Inicia sesi\xf3n y devuelve el token de autenticaci\xf3n",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         description="Credenciales de inicio de sesi\xf3n",\n     *         @OA\\JsonContent(\n     *             required={"email","password"},\n     *             @OA\\Property(property="email", type="string", format="email", example="admin@test.com"),\n     *             @OA\\Property(property="password", type="string", format="password", example="admin_password")\n     *         ),\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="user", type="object"),\n     *             @OA\\Property(property="token", type="string")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=401,\n     *         description="Credenciales incorrectas"\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validaci\xf3n fallida",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="errors", type="object")\n     *         )\n     *     )\n     * )\n     */\n    public function login(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            \'email\' => \'required|email\',\n            \'password\' => \'required\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\'errors\' => $validator->errors()], 422);\n        }\n\n        $user = User::where(\'email\', $request->email)->first();\n\n        if (!$user || !Hash::check($request->password, $user->password)) {\n            return response()->json([\'errors\' => [\'email\' => [\'Las credenciales proporcionadas son incorrectas.\']]], 401);\n        }\n\n        return response()->json([\n            \'user\' => $user,\n            \'token\' => $user->createToken(\'authToken\')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Refresca el token de autenticaci\xf3n.\n     */\n    /**\n     * @OA\\Post(\n     *     path="/api/refresh",\n     *     operationId="refreshToken",\n     *     tags={"Authentication"},\n     *     summary="Refresca el token de autenticaci\xf3n",\n     *     description="Refresca el token de autenticaci\xf3n del usuario actualmente autenticado",\n     *     security={{"bearerAuth": {}}},\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="token", type="string")\n     *         )\n     *     )\n     * )\n     */\n    public function refresh(Request $request)\n    {\n        $user = $request->user();\n        $user->tokens()->delete();\n\n        return response()->json([\n            \'token\' => $user->createToken(\'authToken\')->plainTextToken\n        ]);\n    }\n\n    /**\n     * Cierra la sesi\xf3n del usuario.\n     */\n    /**\n     * @OA\\Post(\n     *     path="/api/logout",\n     *     operationId="logout",\n     *     tags={"Authentication"},\n     *     summary="Cerrar sesi\xf3n",\n     *     description="Cerrar sesi\xf3n del usuario actualmente autenticado",\n     *     security={{"bearerAuth": {}}},\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string")\n     *         )\n     *     )\n     * )\n     */\n    public function logout(Request $request)\n    {\n        $request->user()->tokens()->delete();\n\n        return response()->json([\'message\' => \'Sesi\xf3n cerrada correctamente.\']);\n    }\n}\n')),(0,o.kt)("admonition",{title:"Explicaci\xf3n",type:"info"},(0,o.kt)("h3",{parentName:"admonition",id:"encabezado-de-la-documentaci\xf3n"},"Encabezado de la Documentaci\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Info(\n *     title="API de mi aplicaci\xf3n",\n *     version="1.0.0",\n *     description="Descripci\xf3n de mi API",\n *     termsOfService="https://example.com/terms/",\n *     @OA\\Contact(\n *         email="contacto@example.com"\n *     ),\n *     @OA\\License(\n *         name="MIT",\n *         url="https://opensource.org/licenses/MIT"\n *     )\n * )\n * @OA\\Server(url="http://localhost:8000")\n * @OA\\SecurityScheme(\n *     securityScheme="bearerAuth",\n *     type="http",\n *     scheme="bearer",\n *     bearerFormat="JWT"\n * )\n */\n')),(0,o.kt)("p",{parentName:"admonition"},"Esta secci\xf3n proporciona informaci\xf3n general sobre la API:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"T\xedtulo"),': "API de mi aplicaci\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Versi\xf3n"),": 1.0.0"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Descripci\xf3n de mi API"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"T\xe9rminos de servicio"),": URL donde se pueden encontrar los t\xe9rminos de servicio."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Contacto"),": Email de contacto (",(0,o.kt)("a",{parentName:"li",href:"mailto:contacto@example.com"},"contacto@example.com"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Licencia"),": Tipo de licencia (MIT) y la URL a la misma."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Servidor"),": URL base del servidor (http://localhost:8000)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Esquema de seguridad"),": Define que se usar\xe1 un esquema de autenticaci\xf3n Bearer para tokens JWT.")),(0,o.kt)("h3",{parentName:"admonition",id:"m\xe9todos-del-controlador-authcontroller"},"M\xe9todos del Controlador ",(0,o.kt)("inlineCode",{parentName:"h3"},"AuthController")),(0,o.kt)("h4",{parentName:"admonition",id:"registro-de-un-nuevo-usuario"},"Registro de un nuevo usuario"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/register",\n *     operationId="register",\n *     tags={"Authentication"},\n *     summary="Registro de un nuevo usuario",\n *     description="Registro de un nuevo usuario en la aplicaci\xf3n",\n *     @OA\\RequestBody(\n *         required=true,\n *         description="Datos del nuevo usuario",\n *         @OA\\JsonContent(\n *             required={"name","email","password"},\n *             @OA\\Property(property="name", type="string", example="John Doe"),\n *             @OA\\Property(property="email", type="string", format="email", example="john@example.com"),\n *             @OA\\Property(property="password", type="string", format="password", example="password123")\n *         ),\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Operaci\xf3n exitosa",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="user", type="object"),\n *             @OA\\Property(property="token", type="string")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validaci\xf3n fallida",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="errors", type="object")\n *         )\n *     )\n * )\n */\npublic function register(Request $request)\n{\n    // C\xf3digo del m\xe9todo\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja el registro de nuevos usuarios:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/register")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Authentication"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Registro de un nuevo usuario"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Registro de un nuevo usuario en la aplicaci\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"email")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un objeto con el usuario registrado y un token de autenticaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Devuelve errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"inicio-de-sesi\xf3n"},"Inicio de sesi\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/login",\n *     operationId="login",\n *     tags={"Authentication"},\n *     summary="Inicio de sesi\xf3n",\n *     description="Inicia sesi\xf3n y devuelve el token de autenticaci\xf3n",\n *     @OA\\RequestBody(\n *         required=true,\n *         description="Credenciales de inicio de sesi\xf3n",\n *         @OA\\JsonContent(\n *             required={"email","password"},\n *             @OA\\Property(property="email", type="string", format="email", example="admin@test.com"),\n *             @OA\\Property(property="password", type="string", format="password", example="admin_password")\n *         ),\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Operaci\xf3n exitosa",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="user", type="object"),\n *             @OA\\Property(property="token", type="string")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=401,\n *         description="Credenciales incorrectas"\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validaci\xf3n fallida",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="errors", type="object")\n *         )\n *     )\n * )\n */\npublic function login(Request $request)\n{\n    // C\xf3digo del m\xe9todo\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja el inicio de sesi\xf3n de los usuarios:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/login")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Authentication"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Inicio de sesi\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Inicia sesi\xf3n y devuelve el token de autenticaci\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"email")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un objeto con el usuario autenticado y un token de autenticaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"401"),": Credenciales incorrectas."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"refresca-el-token-de-autenticaci\xf3n"},"Refresca el token de autenticaci\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/refresh",\n *     operationId="refreshToken",\n *     tags={"Authentication"},\n *     summary="Refresca el token de autenticaci\xf3n",\n *     description="Refresca el token de autenticaci\xf3n del usuario actualmente autenticado",\n *     security={{"bearerAuth": {}}},\n *     @OA\\Response(\n *         response=200,\n *         description="Operaci\xf3n exitosa",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="token", type="string")\n *         )\n *     )\n * )\n */\npublic function refresh(Request $request)\n{\n    // C\xf3digo del m\xe9todo\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la renovaci\xf3n del token de autenticaci\xf3n:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/refresh")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Authentication"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Refresca el token de autenticaci\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Refresca el token de autenticaci\xf3n del usuario actualmente autenticado"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Seguridad"),": Requiere autenticaci\xf3n Bearer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un nuevo token de autenticaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"cerrar-sesi\xf3n"},"Cerrar sesi\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/logout",\n *     operationId="logout",\n *     tags={"Authentication"},\n *     summary="Cerrar sesi\xf3n",\n *     description="Cerrar sesi\xf3n del usuario actualmente autenticado",\n *     security={{"bearerAuth": {}}},\n *     @OA\\Response(\n *         response=200,\n *         description="Operaci\xf3n exitosa",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="message", type="string")\n *         )\n *     )\n * )\n */\npublic function logout(Request $request)\n{\n    // C\xf3digo del m\xe9todo\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja el cierre de sesi\xf3n de los usuarios:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/logout")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Authentication"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Cerrar sesi\xf3n"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Cerrar sesi\xf3n del usuario actualmente autenticado"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Seguridad"),": Requiere autenticaci\xf3n Bearer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un mensaje indicando que la sesi\xf3n ha sido cerrada correctamente.")))),(0,o.kt)("h3",{parentName:"admonition",id:"resumen"},"Resumen"),(0,o.kt)("p",{parentName:"admonition"},"El controlador ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthController")," maneja las operaciones b\xe1sicas de autenticaci\xf3n, como registro, inicio de sesi\xf3n, refresco de tokens y cierre de sesi\xf3n. La documentaci\xf3n de OpenAPI proporciona una descripci\xf3n detallada de cada endpoint, incluyendo los par\xe1metros esperados y las posibles respuestas, facilitando as\xed la integraci\xf3n y el uso de la API por parte de otros desarrolladores.")),(0,o.kt)("h3",{id:"tipocontroller"},"TipoController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Tipo;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass TipoController extends Controller\n{\n    /**\n     * @OA\\Get(\n     *     path="/api/tipo",\n     *     operationId="getTiposList",\n     *     tags={"Tipos"},\n     *     summary="Get list of tipos",\n     *     description="Returns list of tipos",\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(type="array", @OA\\Items(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Tipo 1"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo 1")\n     *         ))\n     *     )\n     * )\n     */\n    public function index()\n    {\n        $tipos = Tipo::all();\n        return response()->json($tipos);\n    }\n\n    /**\n     * @OA\\Post(\n     *     path="/api/tipo",\n     *     operationId="storeTipo",\n     *     tags={"Tipos"},\n     *     summary="Store a new tipo",\n     *     description="Stores a new tipo and returns it",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="nombre", type="string", example="Nuevo Tipo"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del nuevo tipo")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=201,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Nuevo Tipo"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del nuevo tipo")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validation error",\n     *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n     *     )\n     * )\n     */\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\',\n            \'descripcion\' => \'required|string|max:1000\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $tipo = Tipo::create($validator->validated());\n\n        return response()->json($tipo, 201);\n    }\n\n    /**\n     * @OA\\Get(\n     *     path="/api/tipo/{id}",\n     *     operationId="getTipoById",\n     *     tags={"Tipos"},\n     *     summary="Get tipo by ID",\n     *     description="Returns a single tipo",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of tipo to return",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Tipo 1"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo 1")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Tipo not found"\n     *     )\n     * )\n     */\n    public function show($id)\n    {\n        $tipo = Tipo::findOrFail($id);\n        return response()->json($tipo);\n    }\n\n    /**\n     * @OA\\Put(\n     *     path="/api/tipo/{id}",\n     *     operationId="updateTipo",\n     *     tags={"Tipos"},\n     *     summary="Update an existing tipo",\n     *     description="Updates an existing tipo and returns it",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of tipo to update",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="nombre", type="string", example="Tipo Actualizado"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo actualizado")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Tipo Actualizado"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo actualizado")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Tipo not found"\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validation error",\n     *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n     *     )\n     * )\n     */\n    public function update(Request $request, $id)\n    {\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\',\n            \'descripcion\' => \'required|string|max:1000\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $tipo = Tipo::find($id);\n        if ($tipo) {\n            $tipo->update($request->all());\n            return response()->json($tipo);\n        } else {\n            return response()->json([\'message\' => \'Tipo no encontrada\'], 404);\n        }\n    }\n\n    /**\n     * @OA\\Delete(\n     *     path="/api/tipo/{id}",\n     *     operationId="deleteTipo",\n     *     tags={"Tipos"},\n     *     summary="Delete a tipo",\n     *     description="Deletes a single tipo",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of tipo to delete",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=204,\n     *         description="Successful operation"\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Tipo not found"\n     *     )\n     * )\n     */\n    public function destroy($id)\n    {\n        $tipo = Tipo::find($id);\n        if ($tipo) {\n            $tipo->delete();\n            return response()->json(null, 204);\n        }\n        return response()->json(null, 404);\n    }\n}\n?>\n')),(0,o.kt)("admonition",{title:"explicaci\xf3n",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Claro, aqu\xed tienes la explicaci\xf3n de la documentaci\xf3n del controlador ",(0,o.kt)("inlineCode",{parentName:"p"},"TipoController")," utilizando anotaciones de OpenAPI (Swagger):"),(0,o.kt)("h3",{parentName:"admonition",id:"m\xe9todos-del-controlador-tipocontroller"},"M\xe9todos del Controlador ",(0,o.kt)("inlineCode",{parentName:"h3"},"TipoController")),(0,o.kt)("h4",{parentName:"admonition",id:"obtener-lista-de-tipos"},"Obtener lista de tipos"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Get(\n *     path="/api/tipo",\n *     operationId="getTiposList",\n *     tags={"Tipos"},\n *     summary="Get list of tipos",\n *     description="Returns list of tipos",\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(type="array", @OA\\Items(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Tipo 1"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo 1")\n *         ))\n *     )\n * )\n */\npublic function index()\n{\n    $tipos = Tipo::all();\n    return response()->json($tipos);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la obtenci\xf3n de una lista de todos los tipos:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/tipo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": GET"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Tipos"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Get list of tipos"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Returns list of tipos"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un array de objetos, cada uno representando un tipo con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),".")),(0,o.kt)("h4",{parentName:"admonition",id:"crear-un-nuevo-tipo"},"Crear un nuevo tipo"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/tipo",\n *     operationId="storeTipo",\n *     tags={"Tipos"},\n *     summary="Store a new tipo",\n *     description="Stores a new tipo and returns it",\n *     @OA\\RequestBody(\n *         required=true,\n *         @OA\\JsonContent(\n *             @OA\\Property(property="nombre", type="string", example="Nuevo Tipo"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del nuevo tipo")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=201,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Nuevo Tipo"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del nuevo tipo")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validation error",\n *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n *     )\n * )\n */\npublic function store(Request $request)\n{\n    $validator = Validator::make($request->all(), [\n        \'nombre\' => \'required|string|max:255\',\n        \'descripcion\' => \'required|string|max:1000\',\n    ]);\n\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    $tipo = Tipo::create($validator->validated());\n\n    return response()->json($tipo, 201);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la creaci\xf3n de un nuevo tipo:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/tipo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Tipos"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Store a new tipo"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Stores a new tipo and returns it"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"201"),": Devuelve el objeto del tipo creado con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"obtener-un-tipo-por-id"},"Obtener un tipo por ID"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Get(\n *     path="/api/tipo/{id}",\n *     operationId="getTipoById",\n *     tags={"Tipos"},\n *     summary="Get tipo by ID",\n *     description="Returns a single tipo",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID of tipo to return",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Tipo 1"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo 1")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Tipo not found"\n *     )\n * )\n */\npublic function show($id)\n{\n    $tipo = Tipo::findOrFail($id);\n    return response()->json($tipo);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la obtenci\xf3n de un tipo espec\xedfico por su ID:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/tipo/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": GET"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Tipos"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Get tipo by ID"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Returns a single tipo"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID del tipo que se desea obtener (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve el objeto del tipo con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Tipo no encontrado.")))),(0,o.kt)("h4",{parentName:"admonition",id:"actualizar-un-tipo-existente"},"Actualizar un tipo existente"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Put(\n *     path="/api/tipo/{id}",\n *     operationId="updateTipo",\n *     tags={"Tipos"},\n *     summary="Update an existing tipo",\n *     description="Updates an existing tipo and returns it",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID of tipo to update",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\RequestBody(\n *         required=true,\n *         @OA\\JsonContent(\n *             @OA\\Property(property="nombre", type="string", example="Tipo Actualizado"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo actualizado")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Tipo Actualizado"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del tipo actualizado")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Tipo not found"\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validation error",\n *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n *     )\n * )\n */\npublic function update(Request $request, $id)\n{\n    $validator = Validator::make($request->all(), [\n        \'nombre\' => \'required|string|max:255\',\n        \'descripcion\' => \'required|string|max:1000\',\n    ]);\n\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    $tipo = Tipo::find($id);\n    if ($tipo) {\n        $tipo->update($request->all());\n        return response()->json($tipo);\n    } else {\n        return response()->json([\'message\' => \'Tipo no encontrada\'], 404);\n    }\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la actualizaci\xf3n de un tipo existente:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/tipo/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": PUT"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Tipos"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Update an existing tipo"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Updates an existing tipo and returns it"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID del tipo que se desea actualizar (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve el objeto del tipo actualizado con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Tipo no encontrado."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"eliminar-un-tipo"},"Eliminar un tipo"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Delete(\n *     path="/api/tipo/{id}",\n *     operationId="deleteTipo",\n *     tags={"Tipos"},\n *     summary="Delete a tipo",\n *     description="Deletes a single tipo",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID of tipo to delete",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\Response(\n *         response=204,\n *         description="Successful operation"\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Tipo not found"\n *     )\n * )\n */\npublic function destroy($id)\n{\n    $tipo = Tipo::find($id);\n    if ($tipo) {\n        $tipo->delete();\n        return response()->json(null, 204);\n    }\n    return response()->json(null, 404);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la eliminaci\xf3n de un tipo:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/tipo/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": DELETE"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Tipos"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Delete a tipo"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Deletes a single tipo"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID del tipo que se desea eliminar (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"204"),": Operaci\xf3n exitosa, sin contenido."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Tipo no encontrado.")))),(0,o.kt)("h3",{parentName:"admonition",id:"resumen-1"},"Resumen"),(0,o.kt)("p",{parentName:"admonition"},"El controlador ",(0,o.kt)("inlineCode",{parentName:"p"},"TipoController"),' maneja las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para la entidad "Tipo". La documentaci\xf3n de OpenAPI proporciona una descripci\xf3n detallada de cada endpoint, incluyendo los par\xe1metros esperados y las posibles respuestas, facilitando as\xed la integraci\xf3n y el uso de la API por parte de otros desarrolladores.')),(0,o.kt)("h3",{id:"denominacioncontroller"},"DenominacionController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Denominacion;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass DenominacionController extends Controller\n{\n    /**\n     * @OA\\Get(\n     *     path="/api/denominacion",\n     *     operationId="getDenominacionList",\n     *     tags={"Denominacion"},\n     *     summary="Get list of denominaciones",\n     *     description="Returns list of denominaciones",\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(type="array", @OA\\Items(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Denominacion 1"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion 1")\n     *         ))\n     *     )\n     * )\n     */\n    public function index()\n    {\n        $denominaciones = Denominacion::all();\n        return response()->json($denominaciones);\n    }\n\n    /**\n     * @OA\\Post(\n     *     path="/api/denominacion",\n     *     operationId="storeDenominacion",\n     *     tags={"Denominacion"},\n     *     summary="Store a new denominacion",\n     *     description="Stores a new denominacion and returns it",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="nombre", type="string", example="Nueva Denominacion"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la nueva denominacion")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=201,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Nueva Denominacion"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la nueva denominacion")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validation error",\n     *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n     *     )\n     * )\n     */\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\',\n            \'descripcion\' => \'required|string|max:1000\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $denominacion = Denominacion::create($validator->validated());\n\n        return response()->json($denominacion, 201);\n    }\n\n    /**\n     * @OA\\Get(\n     *     path="/api/denominacion/{id}",\n     *     operationId="getDenominacionById",\n     *     tags={"Denominacion"},\n     *     summary="Get denominacion by ID",\n     *     description="Returns a single denominacion",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of denominacion to return",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Denominacion 1"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion 1")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Denominacion not found"\n     *     )\n     * )\n     */\n    public function show($id)\n    {\n        $denominacion = Denominacion::findOrFail($id);\n        return response()->json($denominacion);\n    }\n\n    /**\n     * @OA\\Put(\n     *     path="/api/denominacion/{id}",\n     *     operationId="updateDenominacion",\n     *     tags={"Denominacion"},\n     *     summary="Update an existing denominacion",\n     *     description="Updates an existing denominacion and returns it",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of denominacion to update",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="nombre", type="string", example="Denominacion Actualizada"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion actualizada")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Successful operation",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Denominacion Actualizada"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion actualizada")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Denominacion not found"\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Validation error",\n     *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n     *     )\n     * )\n     */\n    public function update(Request $request, $id)\n    {\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\',\n            \'descripcion\' => \'required|string|max:1000\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        $denominacion = Denominacion::find($id);\n        if ($denominacion) {\n            $denominacion->update($request->all());\n            return response()->json($denominacion);\n        } else {\n            return response()->json([\'message\' => \'Denominacion no encontrada\'], 404);\n        }\n    }\n\n    /**\n     * @OA\\Delete(\n     *     path="/api/denominacion/{id}",\n     *     operationId="deleteDenominacion",\n     *     tags={"Denominacion"},\n     *     summary="Delete a denominacion",\n     *     description="Deletes a single denominacion",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID of denominacion to delete",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=204,\n     *         description="Successful operation"\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Denominacion not found"\n     *     )\n     * )\n     */\n    public function destroy($id)\n    {\n        $denominacion = Denominacion::findOrFail($id);\n        $denominacion->delete();\n\n        return response()->json(null, 204);\n    }\n}\n')),(0,o.kt)("admonition",{title:"Explicaci\xf3n",type:"info"},(0,o.kt)("h3",{parentName:"admonition",id:"m\xe9todos-del-controlador-denominacioncontroller"},"M\xe9todos del Controlador ",(0,o.kt)("inlineCode",{parentName:"h3"},"DenominacionController")),(0,o.kt)("h4",{parentName:"admonition",id:"obtener-lista-de-denominaciones"},"Obtener lista de denominaciones"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Get(\n *     path="/api/denominacion",\n *     operationId="getDenominacionList",\n *     tags={"Denominacion"},\n *     summary="Get list of denominaciones",\n *     description="Returns list of denominaciones",\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(type="array", @OA\\Items(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Denominacion 1"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion 1")\n *         ))\n *     )\n * )\n */\npublic function index()\n{\n    $denominaciones = Denominacion::all();\n    return response()->json($denominaciones);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la obtenci\xf3n de una lista de todas las denominaciones:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/denominacion")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": GET"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Denominacion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Get list of denominaciones"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Returns list of denominaciones"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve un array de objetos, cada uno representando una denominaci\xf3n con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),".")))),(0,o.kt)("h4",{parentName:"admonition",id:"crear-una-nueva-denominaci\xf3n"},"Crear una nueva denominaci\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Post(\n *     path="/api/denominacion",\n *     operationId="storeDenominacion",\n *     tags={"Denominacion"},\n *     summary="Store a new denominacion",\n *     description="Stores a new denominacion and returns it",\n *     @OA\\RequestBody(\n *         required=true,\n *         @OA\\JsonContent(\n *             @OA\\Property(property="nombre", type="string", example="Nueva Denominacion"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la nueva denominacion")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=201,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Nueva Denominacion"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la nueva denominacion")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validation error",\n *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n *     )\n * )\n */\npublic function store(Request $request)\n{\n    $validator = Validator::make($request->all(), [\n        \'nombre\' => \'required|string|max:255\',\n        \'descripcion\' => \'required|string|max:1000\',\n    ]);\n\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    $denominacion = Denominacion::create($validator->validated());\n\n    return response()->json($denominacion, 201);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la creaci\xf3n de una nueva denominaci\xf3n:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/denominacion")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": POST"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Denominacion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Store a new denominacion"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Stores a new denominacion and returns it"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"201"),": Devuelve el objeto de la denominaci\xf3n creada con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"obtener-una-denominaci\xf3n-por-id"},"Obtener una denominaci\xf3n por ID"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Get(\n *     path="/api/denominacion/{id}",\n *     operationId="getDenominacionById",\n *     tags={"Denominacion"},\n *     summary="Get denominacion by ID",\n *     description="Returns a single denominacion",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID of denominacion to return",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Denominacion 1"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion 1")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Denominacion not found"\n *     )\n * )\n */\npublic function show($id)\n{\n    $denominacion = Denominacion::findOrFail($id);\n    return response()->json($denominacion);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la obtenci\xf3n de una denominaci\xf3n espec\xedfica por su ID:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/denominacion/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": GET"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Denominacion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Get denominacion by ID"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Returns a single denominacion"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID de la denominaci\xf3n que se desea obtener (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve el objeto de la denominaci\xf3n con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Denominaci\xf3n no encontrada.")))),(0,o.kt)("h4",{parentName:"admonition",id:"actualizar-una-denominaci\xf3n-existente"},"Actualizar una denominaci\xf3n existente"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Put(\n *     path="/api/denominacion/{id}",\n *     operationId="updateDenominacion",\n *     tags={"Denominacion"},\n *     summary="Update an existing denominacion",\n *     description="Updates an existing denominacion and returns it",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID of denominacion to update",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\RequestBody(\n *         required=true,\n *         @OA\\JsonContent(\n *             @OA\\Property(property="nombre", type="string", example="Denominacion Actualizada"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion actualizada")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Successful operation",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Denominacion Actualizada"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n de la denominacion actualizada")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Denominacion not found"\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Validation error",\n *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n *     )\n * )\n */\npublic function update(Request $request, $id)\n{\n    $validator = Validator::make($request->all(), [\n        \'nombre\' => \'required|string|max:255\',\n        \'descripcion\' => \'required|string|max:1000\',\n    ]);\n\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    $denominacion = Denominacion::find($id);\n    if ($denominacion) {\n        $denominacion->update($request->all());\n        return response()->json($denominacion);\n    } else {\n        return response()->json([\'message\' => \'Denominacion no encontrada\'], 404);\n    }\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la actualizaci\xf3n de una denominaci\xf3n existente:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/denominacion/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": PUT"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Denominacion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Update an existing denominacion"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Updates an existing denominacion and returns it"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID de la denominaci\xf3n que se desea actualizar (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la solicitud"),": Se requiere un JSON con los campos ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"200"),": Devuelve el objeto de la denominaci\xf3n actualizada con sus propiedades ",(0,o.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"descripcion"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Denominaci\xf3n no encontrada."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"422"),": Errores de validaci\xf3n.")))),(0,o.kt)("h4",{parentName:"admonition",id:"eliminar-una-denominaci\xf3n"},"Eliminar una denominaci\xf3n"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},'/**\n * @OA\\Delete(\n *     path="/api/denominacion/{id}",\n *     operationId="deleteDenominacion",\n *     tags={"Denominacion"},\n *     summary="Delete a denominacion",\n *     description="Deletes a single denominacion",\n *     @OA\\Parameter(\n\n\n *         name="id",\n *         in="path",\n *         description="ID of denominacion to delete",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\Response(\n *         response=204,\n *         description="Successful operation"\n *     ),\n *     @OA\\Response(\n *         response=404,\n *         description="Denominacion not found"\n *     )\n * )\n */\npublic function destroy($id)\n{\n    $denominacion = Denominacion::findOrFail($id);\n    $denominacion->delete();\n\n    return response()->json(null, 204);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo maneja la eliminaci\xf3n de una denominaci\xf3n:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Endpoint"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/denominacion/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M\xe9todo HTTP"),": DELETE"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tags"),": Denominacion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resumen"),': "Delete a denominacion"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),': "Deletes a single denominacion"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id"),": ID de la denominaci\xf3n que se desea eliminar (en el path)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"204"),": Operaci\xf3n exitosa, sin contenido."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"404"),": Denominaci\xf3n no encontrada.")))),(0,o.kt)("p",{parentName:"admonition"},"Este controlador cubre las operaciones CRUD b\xe1sicas (Crear, Leer, Actualizar y Eliminar) para el recurso ",(0,o.kt)("inlineCode",{parentName:"p"},"Denominacion")," utilizando anotaciones de OpenAPI para facilitar la generaci\xf3n de documentaci\xf3n autom\xe1tica y las pruebas de la API.")),(0,o.kt)("h3",{id:"productocontroller"},"ProductoController"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ProductoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n       /**\n     * @OA\\Get(\n     *     path="/api/producto",\n     *     operationId="getProductoList",\n     *     tags={"Producto"},\n     *     summary="Obtener lista de productos",\n     *     description="Devuelve una lista paginada de productos",\n     *     @OA\\Parameter(\n     *         name="per_page",\n     *         in="query",\n     *         description="N\xfamero de elementos por p\xe1gina",\n     *         required=false,\n     *         @OA\\Schema(type="integer", default=15)\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             type="object",\n     *             @OA\\Property(property="data", type="array", @OA\\Items(\n     *                 @OA\\Property(property="id", type="integer", example=1),\n     *                 @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *                 @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *                 @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *                 @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *                 @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *                 @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *                 @OA\\Property(property="ano", type="integer", example=2023),\n     *                 @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *                 @OA\\Property(property="tipo_id", type="integer", example=1),\n     *                 @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *                 @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *             )),\n     *             @OA\\Property(property="links", type="object", @OA\\Property(property="first", type="string"), @OA\\Property(property="last", type="string"), @OA\\Property(property="prev", type="string"), @OA\\Property(property="next", type="string")),\n     *             @OA\\Property(property="meta", type="object", @OA\\Property(property="current_page", type="integer"), @OA\\Property(property="from", type="integer"), @OA\\Property(property="last_page", type="integer"), @OA\\Property(property="path", type="string"), @OA\\Property(property="per_page", type="integer"), @OA\\Property(property="to", type="integer"), @OA\\Property(property="total", type="integer"))\n     *         )\n     *     )\n     * )\n     */\n    public function index(Request $request): JsonResponse\n    {\n        $perPage = $request->query(\'per_page\', 15); // N\xfamero de elementos por p\xe1gina, por defecto 15\n        $productos = Producto::paginate($perPage);\n        return response()->json($productos);\n    }\n\n     /**\n     * @OA\\Post(\n     *     path="/api/producto",\n     *     operationId="storeProducto",\n     *     tags={"Producto"},\n     *     summary="Crear un nuevo producto",\n     *     description="Crea un nuevo producto y almacena sus datos junto con una imagen",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\MediaType(\n     *             mediaType="multipart/form-data",\n     *             @OA\\Schema(\n     *                 @OA\\Property(\n     *                     property="nombre",\n     *                     type="string",\n     *                     description="Nombre del producto",\n     *                     example="Producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="bodega",\n     *                     type="string",\n     *                     description="Bodega del producto",\n     *                     example="Bodega A"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="descripcion",\n     *                     type="string",\n     *                     description="Descripci\xf3n del producto",\n     *                     example="Descripci\xf3n del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="maridaje",\n     *                     type="string",\n     *                     description="Maridaje del producto",\n     *                     example="Maridaje del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="precio",\n     *                     type="number",\n     *                     format="float",\n     *                     description="Precio del producto",\n     *                     example=20.5\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="graduacion",\n     *                     type="number",\n     *                     format="float",\n     *                     description="Graduaci\xf3n del producto",\n     *                     example=12.5\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="ano",\n     *                     type="integer",\n     *                     description="A\xf1o del producto",\n     *                     example=2023\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="sabor",\n     *                     type="string",\n     *                     description="Sabor del producto",\n     *                     example="Sabor del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="tipo_id",\n     *                     type="integer",\n     *                     description="ID del tipo de producto",\n     *                     example=1\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="denominacion_id",\n     *                     type="integer",\n     *                     description="ID de la denominaci\xf3n del producto",\n     *                     example=1\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="file",\n     *                     type="string",\n     *                     format="binary",\n     *                     description="Imagen del producto"\n     *                 )\n     *             )\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=201,\n     *         description="Producto creado con \xe9xito",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *             @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *             @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *             @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *             @OA\\Property(property="ano", type="integer", example=2023),\n     *             @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *             @OA\\Property(property="tipo_id", type="integer", example=1),\n     *             @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Error de validaci\xf3n",\n     *         @OA\\JsonContent(\n     *             type="object",\n     *             @OA\\Property(property="errors", type="object")\n     *         )\n     *     )\n     * )\n     */\n    public function store(Request $request): JsonResponse\n    {\n        $validator = Validator::make($request->all(), [\n            \'nombre\' => \'required|string|max:255\',\n            \'bodega\' => \'nullable|string|max:255\',\n            \'descripcion\' => \'required|string\',\n            \'maridaje\' => \'required|string\',\n            \'precio\' => \'required|numeric\',\n            \'graduacion\' => \'required|numeric\',\n            \'ano\' => \'nullable|integer\',\n            \'sabor\' => \'nullable|string|max:255\',\n            \'tipo_id\' => \'required|exists:tipos,id\',\n            \'imagen\' => \'nullable|string\',\n            \'file\' => \'required|image|mimes:jpeg,png,jpg,gif|max:2048\',\n            \'denominacion_id\' => \'required|exists:denominaciones,id\',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json($validator->errors(), 422);\n        }\n\n        // Procesar y guardar la imagen\n        $fileUrl = null;\n        if ($request->hasFile(\'file\')) {\n            $filePath = $request->file(\'file\')->store(\'imagenes\', \'public\');\n            $fileUrl = url(\'storage/\' . $filePath);\n        }\n\n        $producto = Producto::create([\n            \'nombre\' => $request->nombre,\n            \'bodega\' => $request->bodega,\n            \'descripcion\' => $request->descripcion,\n            \'maridaje\' => $request->maridaje,\n            \'precio\' => $request->precio,\n            \'graduacion\' => $request->graduacion,\n            \'ano\' => $request->ano,\n            \'sabor\' => $request->sabor,\n            \'tipo_id\' => $request->tipo_id,\n            \'imagen\' => $fileUrl ?? null,\n            \'denominacion_id\' => $request->denominacion_id,\n        ]);\n\n        return response()->json($producto, 201); // 201 Created\n    }\n\n    /**\n     * Display the specified resource.\n     */\n        /**\n     * @OA\\Get(\n     *     path="/api/producto/{id}",\n     *     operationId="getProductoById",\n     *     tags={"Producto"},\n     *     summary="Obtener un producto por ID",\n     *     description="Devuelve los datos de un producto espec\xedfico",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID del producto",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *             @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *             @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *             @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *             @OA\\Property(property="ano", type="integer", example=2023),\n     *             @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *             @OA\\Property(property="tipo_id", type="integer", example=1),\n     *             @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Producto no encontrado",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string", example="Producto no encontrado")\n     *         )\n     *     )\n     * )\n     */\n    public function show($id): JsonResponse\n    {\n        $producto = Producto::find($id);\n        if (!$producto) {\n            return response()->json([\'message\' => \'Producto no encontrado\'], 404);\n        }\n\n        return response()->json($producto);\n    }\n\n/**\n * @OA\\Put(\n *     path="/api/producto/{id}",\n *     operationId="updateProducto",\n *     tags={"Producto"},\n *     summary="Actualizar un producto existente",\n *     description="Actualiza los datos de un producto existente",\n *     @OA\\Parameter(\n *         name="id",\n *         in="path",\n *         description="ID del producto",\n *         required=true,\n *         @OA\\Schema(type="integer")\n *     ),\n *     @OA\\RequestBody(\n *         required=true,\n *         @OA\\JsonContent(\n *             @OA\\Property(property="nombre", type="string", example="Producto Actualizado"),\n *             @OA\\Property(property="bodega", type="string", example="Bodega Actualizada"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto actualizado"),\n *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto actualizado"),\n *             @OA\\Property(property="precio", type="number", format="float", example=25.75),\n *             @OA\\Property(property="graduacion", type="number", format="float", example=13.0),\n *             @OA\\Property(property="ano", type="integer", example=2022),\n *             @OA\\Property(property="sabor", type="string", example="Sabor del producto actualizado"),\n *             @OA\\Property(property="tipo_id", type="integer", example=2),\n *             @OA\\Property(property="denominacion_id", type="integer", example=2),\n *             @OA\\Property(property="file", type="string", format="binary", description="Imagen del producto")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=200,\n *         description="Operaci\xf3n exitosa",\n *         @OA\\JsonContent(\n *             @OA\\Property(property="id", type="integer", example=1),\n *             @OA\\Property(property="nombre", type="string", example="Producto Actualizado"),\n *             @OA\\Property(property="bodega", type="string", example="Bodega Actualizada"),\n *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto actualizado"),\n *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto actualizado"),\n *             @OA\\Property(property="precio", type="number", format="float", example=25.75),\n *             @OA\\Property(property="graduacion", type="number", format="float", example=13.0),\n *             @OA\\Property(property="ano", type="integer", example=2022),\n *             @OA\\Property(property="sabor", type="string", example="Sabor del producto actualizado"),\n *             @OA\\Property(property="tipo_id", type="integer", example=2),\n *             @OA\\Property(property="denominacion_id", type="integer", example=2),\n *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n *         )\n *     ),\n *     @OA\\Response(\n *         response=422,\n *         description="Error de validaci\xf3n",\n *         @OA\\JsonContent(type="object", @OA\\Property(property="errors", type="object"))\n *     )\n * )\n */\npublic function update(Request $request, Producto $producto): JsonResponse\n{\n    $validator = Validator::make($request->all(), [\n        \'nombre\' => \'required|string|max:255\',\n        \'bodega\' => \'nullable|string|max:255\',\n        \'descripcion\' => \'required|string\',\n        \'maridaje\' => \'required|string\',\n        \'precio\' => \'required|numeric\',\n        \'graduacion\' => \'required|numeric\',\n        \'ano\' => \'nullable|integer\',\n        \'sabor\' => \'nullable|string|max:255\',\n        \'tipo_id\' => \'required|exists:tipos,id\',\n      //  \'file\' => \'nullable|image|mimes:jpeg,png,jpg,gif|max:2048\',\n        \'denominacion_id\' => \'required|exists:denominaciones,id\',\n    ]);\n\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n\n    // Procesar y guardar la nueva imagen si se ha cargado\n    if ($request->hasFile(\'file\')) {\n        // Eliminar la imagen antigua si existe\n        if ($producto->file) {\n            Storage::disk(\'public\')->delete($producto->file);\n        }\n\n        // Guardar la nueva imagen\n        $filePath = $request->file(\'file\')->store(\'imagenes\', \'public\');\n        $producto->imagen = $filePath;\n    }\n\n    $producto->update($validator->validated());\n\n    return response()->json($producto);\n}\n    /**\n     * @OA\\Delete(\n     *     path="/api/producto/{id}",\n     *     operationId="deleteProducto",\n     *     tags={"Producto"},\n     *     summary="Eliminar un producto",\n     *     description="Elimina un producto existente por su ID",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID del producto",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=204,\n     *         description="No Content",\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Producto no encontrado",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string", example="Producto no encontrado")\n     *         )\n     *     )\n     * )\n     */\n    public function destroy($id): JsonResponse\n    {\n        $producto = Producto::find($id);\n        if (!$producto) {\n            return response()->json([\'message\' => \'Producto no encontrado\'], 404);\n        }\n\n        // Eliminar la imagen asociada si existe\n        if ($producto->imagen) {\n            $imagePath = \'imagenes/\' . basename($producto->imagen);\n            if (Storage::disk(\'public\')->exists($imagePath)) {\n                $deleted = Storage::disk(\'public\')->delete($imagePath);\n                if (!$deleted) {\n                    return response()->json([\'message\' => \'Error al eliminar la imagen\'], 500);\n                }\n            } else {\n                return response()->json([\'message\' => \'Imagen no encontrada\'], 404);\n            }\n        }\n        \n        $producto->delete();\n\n        return response()->json(null, 204); // 204 No Content\n    }\n\n}\n')),(0,o.kt)("admonition",{title:"explicaci\xf3n",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"La documentaci\xf3n Swagger proporcionada describe un controlador ",(0,o.kt)("inlineCode",{parentName:"p"},"ProductoController")," en Laravel, que gestiona operaciones CRUD para productos, junto con la especificaci\xf3n OpenAPI (anteriormente conocida como Swagger) para documentar una API RESTful. Aqu\xed tienes un desglose detallado de cada parte:"),(0,o.kt)("h3",{parentName:"admonition",id:"listado-de-productos-index"},"Listado de Productos (",(0,o.kt)("inlineCode",{parentName:"h3"},"index"),")"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'* @OA\\Get(\n     *     path="/api/producto",\n     *     operationId="getProductoList",\n     *     tags={"Producto"},\n     *     summary="Obtener lista de productos",\n     *     description="Devuelve una lista paginada de productos",\n     *     @OA\\Parameter(\n     *         name="per_page",\n     *         in="query",\n     *         description="N\xfamero de elementos por p\xe1gina",\n     *         required=false,\n     *         @OA\\Schema(type="integer", default=15)\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             type="object",\n     *             @OA\\Property(property="data", type="array", @OA\\Items(\n     *                 @OA\\Property(property="id", type="integer", example=1),\n     *                 @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *                 @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *                 @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *                 @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *                 @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *                 @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *                 @OA\\Property(property="ano", type="integer", example=2023),\n     *                 @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *                 @OA\\Property(property="tipo_id", type="integer", example=1),\n     *                 @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *                 @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *             )),\n     *             @OA\\Property(property="links", type="object", @OA\\Property(property="first", type="string"), @OA\\Property(property="last", type="string"), @OA\\Property(property="prev", type="string"), @OA\\Property(property="next", type="string")),\n     *             @OA\\Property(property="meta", type="object", @OA\\Property(property="current_page", type="integer"), @OA\\Property(property="from", type="integer"), @OA\\Property(property="last_page", type="integer"), @OA\\Property(property="path", type="string"), @OA\\Property(property="per_page", type="integer"), @OA\\Property(property="to", type="integer"), @OA\\Property(property="total", type="integer"))\n     *         )\n     *     )\n     * )\n     */\n    public function index(Request $request): JsonResponse\n')),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Operaci\xf3n"),": Listar productos paginados."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ruta"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /api/producto")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),": Devuelve una lista paginada de productos."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"per_page")," (query): N\xfamero de elementos por p\xe1gina (por defecto 15)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"200 OK"),": Lista de productos paginada con enlaces y metadatos.")))),(0,o.kt)("h3",{parentName:"admonition",id:"crear-producto-store"},"Crear Producto (",(0,o.kt)("inlineCode",{parentName:"h3"},"store"),")"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'  /**\n     * @OA\\Post(\n     *     path="/api/producto",\n     *     operationId="storeProducto",\n     *     tags={"Producto"},\n     *     summary="Crear un nuevo producto",\n     *     description="Crea un nuevo producto y almacena sus datos junto con una imagen",\n     *     @OA\\RequestBody(\n     *         required=true,\n     *         @OA\\MediaType(\n     *             mediaType="multipart/form-data",\n     *             @OA\\Schema(\n     *                 @OA\\Property(\n     *                     property="nombre",\n     *                     type="string",\n     *                     description="Nombre del producto",\n     *                     example="Producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="bodega",\n     *                     type="string",\n     *                     description="Bodega del producto",\n     *                     example="Bodega A"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="descripcion",\n     *                     type="string",\n     *                     description="Descripci\xf3n del producto",\n     *                     example="Descripci\xf3n del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="maridaje",\n     *                     type="string",\n     *                     description="Maridaje del producto",\n     *                     example="Maridaje del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="precio",\n     *                     type="number",\n     *                     format="float",\n     *                     description="Precio del producto",\n     *                     example=20.5\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="graduacion",\n     *                     type="number",\n     *                     format="float",\n     *                     description="Graduaci\xf3n del producto",\n     *                     example=12.5\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="ano",\n     *                     type="integer",\n     *                     description="A\xf1o del producto",\n     *                     example=2023\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="sabor",\n     *                     type="string",\n     *                     description="Sabor del producto",\n     *                     example="Sabor del producto 1"\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="tipo_id",\n     *                     type="integer",\n     *                     description="ID del tipo de producto",\n     *                     example=1\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="denominacion_id",\n     *                     type="integer",\n     *                     description="ID de la denominaci\xf3n del producto",\n     *                     example=1\n     *                 ),\n     *                 @OA\\Property(\n     *                     property="file",\n     *                     type="string",\n     *                     format="binary",\n     *                     description="Imagen del producto"\n     *                 )\n     *             )\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=201,\n     *         description="Producto creado con \xe9xito",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *             @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *             @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *             @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *             @OA\\Property(property="ano", type="integer", example=2023),\n     *             @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *             @OA\\Property(property="tipo_id", type="integer", example=1),\n     *             @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=422,\n     *         description="Error de validaci\xf3n",\n     *         @OA\\JsonContent(\n     *             type="object",\n     *             @OA\\Property(property="errors", type="object")\n     *         )\n     *     )\n     * )\n     */\n    public function store(Request $request): JsonResponse\n')),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Operaci\xf3n"),": Crear un nuevo producto."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ruta"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"POST /api/producto")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),": Crea un nuevo producto con imagen adjunta."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la Solicitud"),": Campos del producto (nombre, bodega, descripci\xf3n, etc.) y archivo de imagen."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"201 Created"),": Producto creado con \xe9xito con detalles y URL de imagen."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"422 Unprocessable Entity"),": Error de validaci\xf3n si falla la validaci\xf3n de campos.")))),(0,o.kt)("h3",{parentName:"admonition",id:"obtener-producto-por-id-show"},"Obtener Producto por ID (",(0,o.kt)("inlineCode",{parentName:"h3"},"show"),")"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n     * @OA\\Get(\n     *     path="/api/producto/{id}",\n     *     operationId="getProductoById",\n     *     tags={"Producto"},\n     *     summary="Obtener un producto por ID",\n     *     description="Devuelve los datos de un producto espec\xedfico",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID del producto",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *             @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *             @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *             @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *             @OA\\Property(property="ano", type="integer", example=2023),\n     *             @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *             @OA\\Property(property="tipo_id", type="integer", example=1),\n     *             @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Producto no encontrado",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string", example="Producto no encontrado")\n     *         )\n     *     )\n     * )\n     */\n    public function show($id): JsonResponse\n')),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Operaci\xf3n"),": Obtener detalles de un producto por ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ruta"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /api/producto/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),": Devuelve los detalles de un producto espec\xedfico por su ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id")," (path): ID del producto."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"200 OK"),": Detalles del producto."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"404 Not Found"),": Si no se encuentra el producto.")))),(0,o.kt)("h3",{parentName:"admonition",id:"actualizar-producto-update"},"Actualizar Producto (",(0,o.kt)("inlineCode",{parentName:"h3"},"update"),")"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n     * @OA\\Get(\n     *     path="/api/producto/{id}",\n     *     operationId="getProductoById",\n     *     tags={"Producto"},\n     *     summary="Obtener un producto por ID",\n     *     description="Devuelve los datos de un producto espec\xedfico",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID del producto",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=200,\n     *         description="Operaci\xf3n exitosa",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="id", type="integer", example=1),\n     *             @OA\\Property(property="nombre", type="string", example="Producto 1"),\n     *             @OA\\Property(property="bodega", type="string", example="Bodega A"),\n     *             @OA\\Property(property="descripcion", type="string", example="Descripci\xf3n del producto 1"),\n     *             @OA\\Property(property="maridaje", type="string", example="Maridaje del producto 1"),\n     *             @OA\\Property(property="precio", type="number", format="float", example=20.5),\n     *             @OA\\Property(property="graduacion", type="number", format="float", example=12.5),\n     *             @OA\\Property(property="ano", type="integer", example=2023),\n     *             @OA\\Property(property="sabor", type="string", example="Sabor del producto 1"),\n     *             @OA\\Property(property="tipo_id", type="integer", example=1),\n     *             @OA\\Property(property="denominacion_id", type="integer", example=1),\n     *             @OA\\Property(property="imagen", type="string", example="http://example.com/storage/imagen.jpg")\n     *         )\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Producto no encontrado",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string", example="Producto no encontrado")\n     *         )\n     *     )\n     * )\n     */\n    public function show($id): JsonResponse\n')),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Operaci\xf3n"),": Actualizar un producto existente."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ruta"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"PUT /api/producto/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),": Actualiza los datos de un producto existente, incluida la imagen si se proporciona."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id")," (path): ID del producto."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cuerpo de la Solicitud"),": Campos actualizados del producto y archivo de imagen (opcional)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"200 OK"),": Producto actualizado con \xe9xito con detalles y URL de imagen."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"422 Unprocessable Entity"),": Error de validaci\xf3n si falla la validaci\xf3n de campos.")))),(0,o.kt)("h3",{parentName:"admonition",id:"eliminar-producto-destroy"},"Eliminar Producto (",(0,o.kt)("inlineCode",{parentName:"h3"},"destroy"),")"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},' /**\n     * @OA\\Delete(\n     *     path="/api/producto/{id}",\n     *     operationId="deleteProducto",\n     *     tags={"Producto"},\n     *     summary="Eliminar un producto",\n     *     description="Elimina un producto existente por su ID",\n     *     @OA\\Parameter(\n     *         name="id",\n     *         in="path",\n     *         description="ID del producto",\n     *         required=true,\n     *         @OA\\Schema(type="integer")\n     *     ),\n     *     @OA\\Response(\n     *         response=204,\n     *         description="No Content",\n     *     ),\n     *     @OA\\Response(\n     *         response=404,\n     *         description="Producto no encontrado",\n     *         @OA\\JsonContent(\n     *             @OA\\Property(property="message", type="string", example="Producto no encontrado")\n     *         )\n     *     )\n     * )\n     */\n    public function destroy($id): JsonResponse\n')),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Operaci\xf3n"),": Eliminar un producto existente."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ruta"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"DELETE /api/producto/{id}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descripci\xf3n"),": Elimina un producto por su ID y su imagen asociada si existe."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Par\xe1metros"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id")," (path): ID del producto."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Respuestas"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"204 No Content"),": Producto eliminado con \xe9xito."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"404 Not Found"),": Si no se encuentra el producto o la imagen asociada.")))),(0,o.kt)("h3",{parentName:"admonition",id:"detalles-adicionales"},"Detalles Adicionales"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Validaciones"),": Utiliza el validador de Laravel para asegurar que los datos cumplen con ciertos criterios antes de procesarlos."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Almacenamiento de Im\xe1genes"),": Utiliza el sistema de almacenamiento de Laravel para guardar y eliminar im\xe1genes asociadas a los productos."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Paginaci\xf3n"),": Utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"li"},"paginate")," de Eloquent para manejar la paginaci\xf3n de resultados en las respuestas ",(0,o.kt)("inlineCode",{parentName:"li"},"index"),".")),(0,o.kt)("p",{parentName:"admonition"},"Esta documentaci\xf3n Swagger es esencial para desarrolladores y consumidores de la API, ya que proporciona detalles claros sobre c\xf3mo interactuar con cada endpoint, qu\xe9 par\xe1metros esperar y qu\xe9 respuestas recibir, mejorando as\xed la comprensi\xf3n y la interoperabilidad de la API.")))}c.isMDXComponent=!0}}]);